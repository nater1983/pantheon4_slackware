From 0fb4a14b3134b07fd4510f3bfec46b4f0193f20a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Danielle=20For=C3=A9?= <danielle@elementary.io>
Date: Wed, 6 Dec 2023 13:04:28 -0800
Subject: [PATCH] Clean up CSS and fix issues with shadows and struts (#493)

---
 data/styles/Application.css     | 107 ++++++++++++++++++++++++++++++++
 data/styles/application.css     |  37 -----------
 data/styles/panel.css           |  33 ----------
 data/wingpanel.gresource.xml    |   3 +-
 src/PanelWindow.vala            |  11 +---
 src/Widgets/IndicatorEntry.vala |   2 +-
 src/Widgets/Panel.vala          |  14 +----
 src/Widgets/StyleClass.vala     |  23 -------
 src/meson.build                 |   3 +-
 9 files changed, 116 insertions(+), 117 deletions(-)
 create mode 100644 data/styles/Application.css
 delete mode 100644 data/styles/application.css
 delete mode 100644 data/styles/panel.css
 delete mode 100644 src/Widgets/StyleClass.vala

diff --git a/data/styles/Application.css b/data/styles/Application.css
new file mode 100644
index 00000000..6048d381
--- /dev/null
+++ b/data/styles/Application.css
@@ -0,0 +1,107 @@
+panel {
+    background-color: transparent;
+    transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);
+    min-height: 16px;
+}
+
+panel > box {
+    /*Don't transition shadow etc to avoid visual issues with struts*/
+    transition: background 200ms cubic-bezier(0.4, 0, 0.2, 1);
+}
+
+panel.maximized {
+    background-color: #000;
+}
+
+panel.translucent > box {
+    border-radius: 5px 5px 0 0;
+    margin-bottom: 4px;
+}
+
+panel.translucent.color-dark > box {
+    background-color: alpha(black, 0.4);
+    box-shadow:
+        0 1px 3px alpha(#000, 0.3),
+        0 1px 1px alpha(#000, 0.3);
+}
+
+panel.translucent.color-light > box {
+    background-color: alpha(white, 0.75);
+    box-shadow:
+        inset 0 -1px 0 0 alpha(white, 0.2),
+        inset 0 1px 0 0 alpha(white, 0.3),
+        inset 1px 0 0 0 alpha(white, 0.07),
+        inset -1px 0 0 0 alpha(white, 0.07),
+        0 1px 3px alpha(black, 0.16),
+        0 1px 1px alpha(black, 0.1);
+}
+
+panel menubar {
+    background: transparent;
+    box-shadow: none;
+    border: none;
+}
+
+.composited-indicator {
+    padding: 0 6px;
+}
+
+.composited-indicator > revealer {
+    color: white;
+    font-weight: bold;
+    text-shadow:
+        0 0 2px alpha(black, 0.3),
+        0 1px 2px alpha(black, 0.6);
+    transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);
+}
+
+.composited-indicator > revealer image,
+.composited-indicator > revealer spinner {
+    -gtk-icon-shadow:
+        0 0 2px alpha(black, 0.3),
+        0 1px 2px alpha(black, 0.6);
+    -gtk-icon-palette:
+        error @STRAWBERRY_300,
+        success @LIME_300,
+        warning mix(@BANANA_300, @BANANA_500, 0.5);
+}
+
+.color-light .composited-indicator > revealer {
+    color: alpha(black, 0.65);
+    text-shadow:
+        0 0 2px alpha(white, 0.3),
+        0 1px 0 alpha(white, 0.25);
+}
+
+.color-light .composited-indicator > revealer image,
+.color-light .composited-indicator > revealer spinner {
+    -gtk-icon-shadow:
+        0 0 2px alpha(white, 0.3),
+        0 1px 0 alpha(white, 0.25);
+    -gtk-icon-palette:
+        error @STRAWBERRY_700,
+        success mix(@LIME_700, @LIME_900, 0.5),
+        warning mix(@BANANA_700, @BANANA_900, 0.5);
+}
+
+.translucent.color-dark .composited-indicator > revealer {
+    text-shadow:
+        0 0 2px alpha(black, 0.15),
+        0 1px 2px alpha(black, 0.3);
+}
+
+.translucent.color-dark .composited-indicator > revealer image,
+.translucent.color-dark .composited-indicator > revealer spinner {
+    -gtk-icon-shadow:
+        0 0 2px alpha(black, 0.15),
+        0 1px 2px alpha(black, 0.3);
+}
+
+.translucent.color-light .composited-indicator > revealer {
+    text-shadow: none;
+}
+
+.translucent.color-light .composited-indicator > revealer image,
+.translucent.color-light .composited-indicator > revealer spinner {
+    -gtk-icon-shadow: none;
+}
diff --git a/data/styles/application.css b/data/styles/application.css
deleted file mode 100644
index 0799f239..00000000
--- a/data/styles/application.css
+++ /dev/null
@@ -1,37 +0,0 @@
-.composited-indicator {
-    padding: 0 6px;
-}
-
-.composited-indicator > revealer label,
-.composited-indicator > revealer image,
-.composited-indicator > revealer spinner {
-    color: #fff;
-    font-weight: bold;
-    text-shadow:
-        0 0 2px alpha(#000, 0.3),
-        0 1px 2px alpha(#000, 0.6);
-    transition: all 200ms ease-in-out;
-    -gtk-icon-shadow:
-        0 0 2px alpha(#000, 0.3),
-        0 1px 2px alpha(#000, 0.6);
-    -gtk-icon-palette:
-        error @STRAWBERRY_300,
-        success @LIME_300,
-        warning mix(@BANANA_300, @BANANA_500, 0.5);
-}
-
-.panel.color-light .composited-indicator > revealer label,
-.panel.color-light .composited-indicator > revealer image,
-.panel.color-light .composited-indicator > revealer spinner {
-    color: alpha(#000, 0.65);
-    text-shadow:
-        0 0 2px alpha(#fff, 0.3),
-        0 1px 0 alpha(#fff, 0.25);
-    -gtk-icon-shadow:
-        0 0 2px alpha(#fff, 0.3),
-        0 1px 0 alpha(#fff, 0.25);
-    -gtk-icon-palette:
-        error @STRAWBERRY_700,
-        success mix(@LIME_700, @LIME_900, 0.5),
-        warning mix(@BANANA_700, @BANANA_900, 0.5);
-}
diff --git a/data/styles/panel.css b/data/styles/panel.css
deleted file mode 100644
index 803e5a41..00000000
--- a/data/styles/panel.css
+++ /dev/null
@@ -1,33 +0,0 @@
-.panel {
-    background-color: transparent;
-    transition: all 100ms ease-in-out;
-    margin-bottom: 0;
-    min-height: 16px;
-}
-
-.panel.maximized {
-    background-color: #000;
-}
-
-.panel.translucent {
-    background-color: alpha(#000, 0.5);
-    box-shadow:
-        0 1px 3px alpha(#000, 0.24),
-        0 1px 1px alpha(#000, 0.52);
-    margin-bottom: 4px;
-}
-
-.panel.color-light.translucent {
-    background-color: alpha(#fff, 0.85);
-    box-shadow:
-        inset 0 -1px 1px alpha(#fff, 0.2),
-        0 1px 3px alpha(#000, 0.24),
-        0 1px 1px alpha(#000, 0.12);
-    margin-bottom: 4px;
-}
-
-.panel menubar {
-    background: transparent;
-    box-shadow: none;
-    border: none;
-}
diff --git a/data/wingpanel.gresource.xml b/data/wingpanel.gresource.xml
index 3b85f8b6..2cd7b55d 100644
--- a/data/wingpanel.gresource.xml
+++ b/data/wingpanel.gresource.xml
@@ -1,7 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <gresources>
   <gresource prefix="/io/elementary/wingpanel">
-    <file alias="application.css" compressed="true">styles/application.css</file>
-    <file alias="panel.css" compressed="true">styles/panel.css</file>
+    <file alias="Application.css" compressed="true">styles/Application.css</file>
   </gresource>
 </gresources>
diff --git a/src/PanelWindow.vala b/src/PanelWindow.vala
index b3a5ee3e..a7b88ca8 100644
--- a/src/PanelWindow.vala
+++ b/src/PanelWindow.vala
@@ -45,15 +45,8 @@ public class Wingpanel.PanelWindow : Gtk.Window {
 
         monitor_number = screen.get_primary_monitor ();
 
-        var panel_provider = new Gtk.CssProvider ();
-        panel_provider.load_from_resource ("io/elementary/wingpanel/panel.css");
-
-        var style_context = get_style_context ();
-        style_context.add_class (Widgets.StyleClass.PANEL);
-        style_context.add_provider (panel_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
-
         var app_provider = new Gtk.CssProvider ();
-        app_provider.load_from_resource ("io/elementary/wingpanel/application.css");
+        app_provider.load_from_resource ("io/elementary/wingpanel/Application.css");
         Gtk.StyleContext.add_provider_for_screen (Gdk.Screen.get_default (), app_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
 
         this.screen.size_changed.connect (update_panel_dimensions);
@@ -88,6 +81,8 @@ public class Wingpanel.PanelWindow : Gtk.Window {
 
         key_controller = new Gtk.EventControllerKey (this);
         key_controller.key_pressed.connect (on_key_pressed);
+
+        panel.size_allocate.connect (update_panel_dimensions);
     }
 
     private void on_realize () {
diff --git a/src/Widgets/IndicatorEntry.vala b/src/Widgets/IndicatorEntry.vala
index 9e21b709..9c020a4f 100644
--- a/src/Widgets/IndicatorEntry.vala
+++ b/src/Widgets/IndicatorEntry.vala
@@ -49,7 +49,7 @@ public class Wingpanel.Widgets.IndicatorEntry : Gtk.MenuItem {
         display_widget = base_indicator.get_display_widget ();
         halign = Gtk.Align.START;
         name = base_indicator.code_name + "/entry";
-        get_style_context ().add_class (StyleClass.COMPOSITED_INDICATOR);
+        get_style_context ().add_class ("composited-indicator");
 
         if (display_widget == null) {
             return;
diff --git a/src/Widgets/Panel.vala b/src/Widgets/Panel.vala
index 96dd1197..9c03adab 100644
--- a/src/Widgets/Panel.vala
+++ b/src/Widgets/Panel.vala
@@ -27,15 +27,12 @@ public class Wingpanel.Widgets.Panel : Gtk.EventBox {
     private unowned Gtk.StyleContext style_context;
     private Gtk.CssProvider? style_provider = null;
 
-    private static Gtk.CssProvider resource_provider;
-
     public Panel (Services.PopoverManager popover_manager) {
         Object (popover_manager : popover_manager);
     }
 
-    static construct {
-        resource_provider = new Gtk.CssProvider ();
-        resource_provider.load_from_resource ("io/elementary/wingpanel/panel.css");
+    class construct {
+        set_css_name ("panel");
     }
 
     construct {
@@ -48,18 +45,15 @@ public class Wingpanel.Widgets.Panel : Gtk.EventBox {
             can_focus = true,
             halign = Gtk.Align.START
         };
-        left_menubar.get_style_context ().add_provider (resource_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
 
         center_menubar = new Gtk.MenuBar () {
             can_focus = true
         };
-        center_menubar.get_style_context ().add_provider (resource_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
 
         right_menubar = new IndicatorMenuBar () {
             can_focus = true,
             halign = Gtk.Align.END
         };
-        right_menubar.get_style_context ().add_provider (resource_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
 
         var box = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 0);
         box.pack_start (left_menubar);
@@ -79,8 +73,6 @@ public class Wingpanel.Widgets.Panel : Gtk.EventBox {
         });
 
         style_context = get_style_context ();
-        style_context.add_class (StyleClass.PANEL);
-        style_context.add_provider (resource_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
 
         Services.BackgroundManager.get_default ().background_state_changed.connect (update_background);
     }
@@ -290,7 +282,7 @@ public class Wingpanel.Widgets.Panel : Gtk.EventBox {
 
         string css = """
             .panel {
-                transition: all %ums ease-in-out;
+                transition: all %ums cubic-bezier(0.4, 0, 0.2, 1);
             }
         """.printf (animation_duration);
 
diff --git a/src/Widgets/StyleClass.vala b/src/Widgets/StyleClass.vala
deleted file mode 100644
index 00ecbf0e..00000000
--- a/src/Widgets/StyleClass.vala
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2011-2015 Wingpanel Developers (http://launchpad.net/wingpanel)
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- *
- * You should have received a copy of the GNU General Public
- * License along with this program; if not, write to the
- * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
- * Boston, MA 02110-1301 USA.
- */
-
-namespace Wingpanel.Widgets.StyleClass {
-    public const string PANEL = "panel";
-    public const string COMPOSITED_INDICATOR = "composited-indicator";
-}
diff --git a/src/meson.build b/src/meson.build
index ab7f5dcd..1ad0597d 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -9,8 +9,7 @@ wingpanel_files = files(
     'Widgets/IndicatorEntry.vala',
     'Widgets/IndicatorMenuBar.vala',
     'Widgets/IndicatorPopover.vala',
-    'Widgets/Panel.vala',
-    'Widgets/StyleClass.vala',
+    'Widgets/Panel.vala'
 )
 
 wingpanel_deps = [
From cae197c953f4332e67cf0a5457b4e54f8adc3424 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Danielle=20For=C3=A9?= <danielle@elementary.io>
Date: Fri, 2 Feb 2024 21:20:57 -0800
Subject: [PATCH] Add sorting for QuickSettings (#516)

---
 lib/Indicator.vala                | 1 +
 src/Services/IndicatorSorter.vala | 3 ++-
 2 files changed, 3 insertions(+), 1 deletion(-)

diff --git a/lib/Indicator.vala b/lib/Indicator.vala
index bd6910a9..52858ab9 100644
--- a/lib/Indicator.vala
+++ b/lib/Indicator.vala
@@ -32,6 +32,7 @@ public abstract class Wingpanel.Indicator : GLib.Object {
     public const string NIGHT_LIGHT = "nightlight";
     public const string PRIVACY = "privacy";
     public const string ACCESSIBILITY = "a11y";
+    public const string QUICKSETTINGS = "quick-settings";
 
     /**
      * The unique name representing the indicator.
diff --git a/src/Services/IndicatorSorter.vala b/src/Services/IndicatorSorter.vala
index f7e78a6a..675e5daa 100644
--- a/src/Services/IndicatorSorter.vala
+++ b/src/Services/IndicatorSorter.vala
@@ -44,7 +44,8 @@ public class Wingpanel.Services.IndicatorSorter : Object {
         indicator_order[Indicator.SYNC] = 10;
         indicator_order[Indicator.POWER] = 11;
         indicator_order[Indicator.MESSAGES] = 12;
-        indicator_order[Indicator.SESSION] = 13;
+        indicator_order[Indicator.QUICKSETTINGS] = 13;
+        indicator_order[Indicator.SESSION] = 14;
     }
 
     public int compare_func (Wingpanel.Widgets.IndicatorEntry? a, Wingpanel.Widgets.IndicatorEntry? b) {
From 7be83864c197e47ea7bffd97bed5755f4a70baa0 Mon Sep 17 00:00:00 2001
From: Mario Daniel Ruiz Saavedra <desiderantes93@gmail.com>
Date: Thu, 8 Feb 2024 11:36:53 -0500
Subject: [PATCH] Fix typo on log message (#518)

---
 wingpanel-interface/Main.vala | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/wingpanel-interface/Main.vala b/wingpanel-interface/Main.vala
index c5f5944e..2ea13723 100644
--- a/wingpanel-interface/Main.vala
+++ b/wingpanel-interface/Main.vala
@@ -44,7 +44,7 @@ public class WingpanelInterface.Main : Gala.Plugin {
                       BusNameOwnerFlags.NONE,
                       on_bus_aquired,
                       null,
-                      () => warning ("Aquirering \"%s\" failed.", DBUS_NAME));
+                      () => warning ("Acquiring \"%s\" failed.", DBUS_NAME));
     }
 
     public override void destroy () {
From 1823b2252c1e594219875c78f1eea8ea5a28815d Mon Sep 17 00:00:00 2001
From: lenemter <lenemter@gmail.com>
Date: Wed, 14 Feb 2024 18:24:24 +0900
Subject: [PATCH] Wingpanel Interface: don't use Gdk.Screen to get monitor
 geometry

---
 wingpanel-interface/BackgroundManager.vala | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/wingpanel-interface/BackgroundManager.vala b/wingpanel-interface/BackgroundManager.vala
index 9138459f..dc247ec0 100644
--- a/wingpanel-interface/BackgroundManager.vala
+++ b/wingpanel-interface/BackgroundManager.vala
@@ -139,9 +139,8 @@ public class WingpanelInterface.BackgroundManager : Object {
 
     public async void update_bk_color_info () {
         SourceFunc callback = update_bk_color_info.callback;
-        Gdk.Rectangle monitor_geometry;
 
-        Gdk.Screen.get_default ().get_monitor_geometry (monitor, out monitor_geometry);
+        var monitor_geometry = Main.display.get_monitor_geometry (monitor);
 
         Utils.get_background_color_information.begin (Main.wm, monitor, 0, 0, monitor_geometry.width, panel_height, (obj, res) => {
             try {
From 52aa9a71300b8138306368f80ecdcc5f6bf44f71 Mon Sep 17 00:00:00 2001
From: Leo <lenemter@gmail.com>
Date: Wed, 14 Feb 2024 21:03:34 +0900
Subject: [PATCH] FocusManager: don't use singleton (#521)

---
 wingpanel-interface/DBusServer.vala   |  9 ++++++---
 wingpanel-interface/FocusManager.vala | 10 ----------
 2 files changed, 6 insertions(+), 13 deletions(-)

diff --git a/wingpanel-interface/DBusServer.vala b/wingpanel-interface/DBusServer.vala
index d960e7ac..e053faf6 100644
--- a/wingpanel-interface/DBusServer.vala
+++ b/wingpanel-interface/DBusServer.vala
@@ -20,6 +20,7 @@
 [DBus (name = "org.pantheon.gala.WingpanelInterface")]
 public class WingpanelInterface.DBusServer : Object {
     private BackgroundManager background_manager;
+    private FocusManager focus_manager;
 
     public signal void state_changed (BackgroundState state, uint animation_duration);
 
@@ -28,17 +29,19 @@ public class WingpanelInterface.DBusServer : Object {
         background_manager.state_changed.connect ((state, animation_duration) => {
             state_changed (state, animation_duration);
         });
+
+        focus_manager = new FocusManager ();
     }
 
     public bool begin_grab_focused_window (int x, int y, int button, uint time, uint state) throws GLib.Error {
-        return FocusManager.get_default ().begin_grab_focused_window (x, y, button, time, state);
+        return focus_manager.begin_grab_focused_window (x, y, button, time, state);
     }
 
     public void remember_focused_window () throws GLib.Error {
-        FocusManager.get_default ().remember_focused_window ();
+        focus_manager.remember_focused_window ();
     }
 
     public void restore_focused_window () throws GLib.Error {
-        FocusManager.get_default ().restore_focused_window ();
+        focus_manager.restore_focused_window ();
     }
 }
diff --git a/wingpanel-interface/FocusManager.vala b/wingpanel-interface/FocusManager.vala
index 461661be..21583e59 100644
--- a/wingpanel-interface/FocusManager.vala
+++ b/wingpanel-interface/FocusManager.vala
@@ -18,8 +18,6 @@
  */
 
 public class WingpanelInterface.FocusManager : Object {
-    private static FocusManager? instance = null;
-
     private unowned Meta.Workspace? current_workspace = null;
     private unowned Meta.Window? last_focused_window = null;
     private unowned Meta.Window? last_focused_dialog_window = null;
@@ -140,12 +138,4 @@ public class WingpanelInterface.FocusManager : Object {
 
         current_workspace = workspace;
     }
-
-    public static FocusManager get_default () {
-        if (instance == null) {
-            instance = new FocusManager ();
-        }
-
-        return instance;
-    }
 }
From 0c35f4d54bc36028da0545db1ded23b6d93a6b69 Mon Sep 17 00:00:00 2001
From: Leo <lenemter@gmail.com>
Date: Wed, 21 Feb 2024 07:08:25 +0900
Subject: [PATCH] Use BackgroundManager to get wallpaper (#522)

---
 wingpanel-interface/Utils.vala | 15 ++++++++-------
 1 file changed, 8 insertions(+), 7 deletions(-)

diff --git a/wingpanel-interface/Utils.vala b/wingpanel-interface/Utils.vala
index 803d4b8e..f46e27f2 100644
--- a/wingpanel-interface/Utils.vala
+++ b/wingpanel-interface/Utils.vala
@@ -48,17 +48,18 @@ namespace WingpanelInterface.Utils {
 
     public async ColorInformation get_background_color_information (Gala.WindowManager wm, int monitor,
                                                                     int reference_x, int reference_y, int reference_width, int reference_height) throws DBusError {
-        var background = wm.background_group.get_child_at_index (monitor);
+        var bg_manager = (Gala.BackgroundManagerInterface) wm.background_group.get_child_at_index (monitor);
 
-        if (background == null) {
+        if (bg_manager == null) {
             throw new DBusError.INVALID_ARGS ("Invalid monitor requested: %i".printf (monitor));
         }
 
         var effect = new DummyOffscreenEffect ();
-        background.add_effect (effect);
+        unowned var newest_background_actor = bg_manager.newest_background_actor;
+        newest_background_actor.add_effect (effect);
 
-        var bg_actor_width = (int)background.width;
-        var bg_actor_height = (int)background.height;
+        var bg_actor_width = (int) newest_background_actor.width;
+        var bg_actor_height = (int) newest_background_actor.height;
 
         // A commit in mutter added some padding to offscreen textures, so we
         // need to avoid looking at the edges of the texture as it often has a
@@ -91,7 +92,7 @@ namespace WingpanelInterface.Utils {
 
         paint_signal_handler = effect.done_painting.connect (() => {
             SignalHandler.disconnect (effect, paint_signal_handler);
-            background.remove_effect (effect);
+            newest_background_actor.remove_effect (effect);
 
             var texture = (Cogl.Texture)effect.get_texture ();
             var texture_width = texture.get_width ();
@@ -211,7 +212,7 @@ namespace WingpanelInterface.Utils {
             get_background_color_information.callback ();
         });
 
-        background.queue_redraw ();
+        newest_background_actor.queue_redraw ();
 
         yield;
 
From 4a6433bd4a5a2fc7bb36d747d84be34a0689a939 Mon Sep 17 00:00:00 2001
From: frothyy <105081942+frothy-wifi@users.noreply.github.com>
Date: Sun, 25 Feb 2024 22:11:08 -0600
Subject: [PATCH] Fix typos (#523)

Changed method name `private void on_bus_aquired` to `private void on_bus_acquired`
---
 wingpanel-interface/Main.vala | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/wingpanel-interface/Main.vala b/wingpanel-interface/Main.vala
index 2ea13723..ecb4405d 100644
--- a/wingpanel-interface/Main.vala
+++ b/wingpanel-interface/Main.vala
@@ -42,7 +42,7 @@ public class WingpanelInterface.Main : Gala.Plugin {
         Bus.own_name (BusType.SESSION,
                       DBUS_NAME,
                       BusNameOwnerFlags.NONE,
-                      on_bus_aquired,
+                      on_bus_acquired,
                       null,
                       () => warning ("Acquiring \"%s\" failed.", DBUS_NAME));
     }
@@ -57,7 +57,7 @@ public class WingpanelInterface.Main : Gala.Plugin {
         }
     }
 
-    private void on_bus_aquired (DBusConnection connection) {
+    private void on_bus_acquired (DBusConnection connection) {
         dbus_connection = connection;
 
         try {
From ecd4ac2d76ce3f1ad4902ef2f9346f31d9e0ad2c Mon Sep 17 00:00:00 2001
From: Leo <lenemter@gmail.com>
Date: Sun, 10 Mar 2024 02:49:25 +0900
Subject: [PATCH] PanelWindow: simplify `set_expanded` (#526)

---
 src/PanelWindow.vala | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/PanelWindow.vala b/src/PanelWindow.vala
index a7b88ca8..e3b4cff5 100644
--- a/src/PanelWindow.vala
+++ b/src/PanelWindow.vala
@@ -208,8 +208,8 @@ public class Wingpanel.PanelWindow : Gtk.Window {
             Services.BackgroundManager.get_default ().restore_window ();
 
             this.expanded = false;
-            this.set_size_request (monitor_width, expanded ? monitor_height : -1);
-            this.resize (monitor_width, expanded ? monitor_height : 1);
+            this.set_size_request (monitor_width, -1);
+            this.resize (monitor_width, 1);
         }
     }
 }
From 4dd9990d3d17aef391767fb5240fde9a20ca8a57 Mon Sep 17 00:00:00 2001
From: Leonhard <106322251+leolost2605@users.noreply.github.com>
Date: Tue, 16 Apr 2024 19:37:02 +0200
Subject: [PATCH] wayland: Fix wingpanel breaking everything (#527)

* wayland: Fix wingpanel breaking everything

* Only connect to size_allocate on X

---------

Co-authored-by: Ryan Kornheisl <ryan@skarva.tech>
---
 src/PanelWindow.vala | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/src/PanelWindow.vala b/src/PanelWindow.vala
index e3b4cff5..b02aaabd 100644
--- a/src/PanelWindow.vala
+++ b/src/PanelWindow.vala
@@ -82,7 +82,9 @@ public class Wingpanel.PanelWindow : Gtk.Window {
         key_controller = new Gtk.EventControllerKey (this);
         key_controller.key_pressed.connect (on_key_pressed);
 
-        panel.size_allocate.connect (update_panel_dimensions);
+        if (!Utils.is_wayland ()) {
+            panel.size_allocate.connect (update_panel_dimensions);
+        }
     }
 
     private void on_realize () {
From d00d48c62f6baa5e1a66756b55ff8b9ea74a9485 Mon Sep 17 00:00:00 2001
From: David Hewitt <davidmhewitt@users.noreply.github.com>
Date: Sat, 4 May 2024 03:16:20 +0100
Subject: [PATCH] appdata: Use newer, non-deprecated developer tag

---
 data/wingpanel.appdata.xml.in | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/data/wingpanel.appdata.xml.in b/data/wingpanel.appdata.xml.in
index e042ef37..1fa77f2c 100644
--- a/data/wingpanel.appdata.xml.in
+++ b/data/wingpanel.appdata.xml.in
@@ -137,7 +137,9 @@
     </screenshot>
   </screenshots>
   <compulsory_for_desktop>Pantheon</compulsory_for_desktop>
-  <developer_name>elementary, Inc.</developer_name>
+  <developer id="org.elementaryos">
+    <name>elementary, Inc.</name>
+  </developer>
   <url type="homepage">https://elementary.io/</url>
   <url type="bugtracker">https://github.com/elementary/wingpanel/issues</url>
   <url type="donation">https://elementary.io/get-involved#funding</url>
From a3dcd33edfcec50c8cac17583077bef60e5b2016 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Corentin=20No=C3=ABl?= <tintou@noel.tf>
Date: Tue, 21 May 2024 21:59:35 +0200
Subject: [PATCH] FocusManager: Make sure to never reuse a freed Window (#532)

---
 wingpanel-interface/FocusManager.vala | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/wingpanel-interface/FocusManager.vala b/wingpanel-interface/FocusManager.vala
index 80853687..67373792 100644
--- a/wingpanel-interface/FocusManager.vala
+++ b/wingpanel-interface/FocusManager.vala
@@ -18,9 +18,9 @@
  */
 
 public class WingpanelInterface.FocusManager : Object {
-    private unowned Meta.Workspace? current_workspace = null;
-    private unowned Meta.Window? last_focused_window = null;
-    private unowned Meta.Window? last_focused_dialog_window = null;
+    private Meta.Workspace? current_workspace = null;
+    private Meta.Window? last_focused_window = null;
+    private Meta.Window? last_focused_dialog_window = null;
 
     public FocusManager () {
         unowned Meta.WorkspaceManager manager = Main.display.get_workspace_manager ();
@@ -83,6 +83,10 @@ public class WingpanelInterface.FocusManager : Object {
     void window_unmanaged (Meta.Window window) {
         window.focused.disconnect (window_focused);
         window.unmanaged.disconnect (window_unmanaged);
+
+        if (last_focused_window == window) {
+            last_focused_window = null;
+        }
     }
 
     public bool begin_grab_focused_window (int x, int y, int button, uint time, uint state) {
From f3af8837c2ea50099f75960ae6a63219a158f441 Mon Sep 17 00:00:00 2001
From: Leonhard <106322251+leolost2605@users.noreply.github.com>
Date: Sun, 26 May 2024 18:20:22 +0200
Subject: [PATCH] Use wayland protocol for positioning (#533)

---
 meson.build                            |   5 ++
 protocol/meson.build                   |  32 +++++++
 protocol/pantheon-desktop-shell-v1.xml | 115 +++++++++++++++++++++++++
 protocol/pantheon-desktop-shell.deps   |   1 +
 protocol/pantheon-desktop-shell.vapi   |  72 ++++++++++++++++
 src/Application.vala                   |   2 +-
 src/PanelWindow.vala                   |  64 +++++++++++++-
 src/meson.build                        |   5 +-
 vapi/gdk-wayland-3.0.vapi              |  16 ++++
 9 files changed, 307 insertions(+), 5 deletions(-)
 create mode 100644 protocol/meson.build
 create mode 100644 protocol/pantheon-desktop-shell-v1.xml
 create mode 100644 protocol/pantheon-desktop-shell.deps
 create mode 100644 protocol/pantheon-desktop-shell.vapi
 create mode 100644 vapi/gdk-wayland-3.0.vapi

diff --git a/meson.build b/meson.build
index af97a9db..8d4d5e7f 100644
--- a/meson.build
+++ b/meson.build
@@ -18,6 +18,8 @@ add_project_arguments([
     language: 'c'
 )
 
+vala = meson.get_compiler('vala')
+
 i18n = import('i18n')
 gnome = import('gnome')
 pkg = import('pkgconfig')
@@ -26,6 +28,7 @@ glib_dep = dependency('glib-2.0', version: '>=2.32')
 gio_dep = dependency('gio-2.0')
 gio_unix_dep = dependency('gio-unix-2.0')
 gmodule_dep = dependency('gmodule-2.0')
+gdk_wl_dep = dependency('gdk-wayland-3.0')
 # GDK X11 dep is for detecting whether we're on Wayland or not ONLY, we don't actually have
 # a hard X11 dependency here
 gdk_x11_dep = dependency('gdk-x11-3.0')
@@ -33,7 +36,9 @@ gtk_dep = dependency('gtk+-3.0', version: '>=3.10')
 gee_dep = dependency('gee-0.8')
 granite_dep = dependency('granite', version: '>=5.4.0')
 posix_dep = meson.get_compiler('vala').find_library('posix')
+wl_client_dep = dependency('wayland-client')
 
+subdir('protocol')
 subdir('data')
 subdir('lib')
 subdir('schemas')
diff --git a/protocol/meson.build b/protocol/meson.build
new file mode 100644
index 00000000..56b537f9
--- /dev/null
+++ b/protocol/meson.build
@@ -0,0 +1,32 @@
+dep_scanner = dependency('wayland-scanner', native: true)
+prog_scanner = find_program(dep_scanner.get_variable(pkgconfig: 'wayland_scanner'))
+
+protocol_file = files('pantheon-desktop-shell-v1.xml')
+
+pantheon_desktop_shell_sources = []
+pantheon_desktop_shell_sources += custom_target(
+	'pantheon-desktop-shell-client-protocol.h',
+	command: [ prog_scanner, 'client-header', '@INPUT@', '@OUTPUT@' ],
+	input: protocol_file,
+	output: 'pantheon-desktop-shell-client-protocol.h',
+)
+
+output_type = 'private-code'
+if dep_scanner.version().version_compare('< 1.14.91')
+    output_type = 'code'
+endif
+pantheon_desktop_shell_sources += custom_target(
+	'pantheon-desktop-shell-protocol.c',
+	command: [ prog_scanner, output_type, '@INPUT@', '@OUTPUT@' ],
+	input: protocol_file,
+	output: 'pantheon-desktop-shell-protocol.c',
+)
+
+pantheon_desktop_shell_dep = declare_dependency(
+    dependencies: [
+        vala.find_library('pantheon-desktop-shell', dirs: meson.current_source_dir()),
+        dependency('wayland-client'),
+    ],
+    include_directories: include_directories('.'),
+    sources: pantheon_desktop_shell_sources
+)
diff --git a/protocol/pantheon-desktop-shell-v1.xml b/protocol/pantheon-desktop-shell-v1.xml
new file mode 100644
index 00000000..18a7da64
--- /dev/null
+++ b/protocol/pantheon-desktop-shell-v1.xml
@@ -0,0 +1,115 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<protocol name="pantheon_shell_v1">
+  <copyright><![CDATA[
+    SPDX-FileCopyrightText: 2023 Corentin Noël <tintou@noel.tf>
+
+    SPDX-License-Identifier: LGPL-2.1-or-later
+  ]]></copyright>
+
+  <interface name="io_elementary_pantheon_shell_v1" version="1">
+    <description summary="create panel, widget and get more control">
+      This interface is used by the Pantheon Wayland shell to communicate with
+      the compositor.
+    </description>
+
+    <request name="get_panel">
+      <description summary="create a panel surface from a surface">
+        Create a panel surface from an existing surface.
+      </description>
+      <arg name="output" type="new_id" interface="io_elementary_pantheon_panel_v1"/>
+      <arg name="surface" type="object" interface="wl_surface"/>
+    </request>
+
+    <request name="get_widget">
+      <description summary="create a widget surface from a surface">
+        Create a desktop widget surface from an existing surface.
+      </description>
+      <arg name="output" type="new_id" interface="io_elementary_pantheon_widget_v1"/>
+      <arg name="surface" type="object" interface="wl_surface"/>
+    </request>
+
+    <request name="get_extended_behavior">
+      <description summary="create a desktop-specific surface from a surface">
+        Create a desktop-specific surface from an existing surface.
+      </description>
+      <arg name="output" type="new_id" interface="io_elementary_pantheon_extended_behavior_v1"/>
+      <arg name="surface" type="object" interface="wl_surface"/>
+    </request>
+  </interface>
+
+  <interface name="io_elementary_pantheon_panel_v1" version="1">
+    <request name="destroy" type="destructor"/>
+
+    <enum name="anchor">
+      <description summary="anchor">
+        The anchor is a placement hint to the compositor.
+      </description>
+      <entry name="top" value="0" summary="the top edge of the screen"/>
+      <entry name="bottom" value="1" summary="the bottom edge of the screen"/>
+      <entry name="left" value="2" summary="the left edge of the screen"/>
+      <entry name="right" value="3" summary="the right edge of the screen"/>
+    </enum>
+
+    <enum name="hide_mode">
+      <description summary="hide mode">
+        How the shell should handle the window.
+      </description>
+      <entry name="never" value="0" summary="make the surface exclusive"/>
+      <entry name="maximized_focus_window" value="1" summary="hide when the focused window is maximized"/>
+      <entry name="overlapping_focus_window" value="2" summary="hide when the focused window overlaps the surface"/>
+      <entry name="overlapping_window" value="3" summary="hide when any window overlaps the surface"/>
+      <entry name="always" value="4" summary="always hide and only show if requested by the user"/>
+    </enum>
+
+    <request name="set_anchor">
+      <description summary="set panel edge anchor">
+        Tell the shell which side of the screen the panel is
+        located. This is so that new windows do not overlap the panel
+        and maximized windows maximize properly.
+      </description>
+
+      <arg name="anchor" type="uint" enum="anchor" summary="anchor"/>
+    </request>
+
+    <request name="focus">
+      <description summary="request keyboard focus">
+        Request keyboard focus, taking it away from any other window.
+        Keyboard focus must always be manually be requested and is
+        - in contrast to normal windows - never automatically granted
+        by the compositor.
+      </description>
+    </request>
+
+    <request name="set_size">
+      <description summary="set size">
+        The given size is only used for exclusive zones and
+        collision tracking for auto hide. By default and if set
+        to -1 the size of the surface is used.
+      </description>
+
+      <arg name="width" type="int"/>
+      <arg name="height" type="int"/>
+    </request>
+
+    <request name="set_hide_mode">
+      <description summary="set panel hide mode">
+        Tell the shell when to hide the panel.
+      </description>
+
+      <arg name="hide_mode" type="uint" enum="hide_mode" summary="hide mode"/>
+    </request>
+  </interface>
+
+  <interface name="io_elementary_pantheon_widget_v1" version="1">
+    <request name="destroy" type="destructor"/>
+  </interface>
+
+  <interface name="io_elementary_pantheon_extended_behavior_v1" version="1">
+    <request name="destroy" type="destructor"/>
+    <request name="set_keep_above">
+      <description summary="set keep above">
+        Tell the shell to keep the surface above on all workspaces
+      </description>
+    </request>
+  </interface>
+</protocol>
diff --git a/protocol/pantheon-desktop-shell.deps b/protocol/pantheon-desktop-shell.deps
new file mode 100644
index 00000000..8289bf8e
--- /dev/null
+++ b/protocol/pantheon-desktop-shell.deps
@@ -0,0 +1 @@
+wayland-client
diff --git a/protocol/pantheon-desktop-shell.vapi b/protocol/pantheon-desktop-shell.vapi
new file mode 100644
index 00000000..8c515b76
--- /dev/null
+++ b/protocol/pantheon-desktop-shell.vapi
@@ -0,0 +1,72 @@
+/*
+ * Copyright 2023 elementary, Inc. <https://elementary.io>
+ * Copyright 2023 Corentin Noël <tintou@noel.tf>
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ */
+
+namespace Pantheon.Desktop {
+    [CCode (cheader_filename = "pantheon-desktop-shell-client-protocol.h", cname = "struct io_elementary_pantheon_shell_v1", cprefix = "io_elementary_pantheon_shell_v1_")]
+    public class Shell : Wl.Proxy {
+        [CCode (cheader_filename = "pantheon-desktop-shell-client-protocol.h", cname = "io_elementary_pantheon_shell_v1_interface")]
+        public static Wl.Interface iface;
+        public void set_user_data (void* user_data);
+        public void* get_user_data ();
+        public uint32 get_version ();
+        public void destroy ();
+        public Pantheon.Desktop.Panel get_panel (Wl.Surface surface);
+        public Pantheon.Desktop.Widget get_widget (Wl.Surface surface);
+        public Pantheon.Desktop.ExtendedBehavior get_extended_behavior (Wl.Surface surface);
+
+    }
+    [CCode (cheader_filename = "pantheon-desktop-shell-client-protocol.h", cname = "enum io_elementary_pantheon_panel_v1_anchor", cprefix="IO_ELEMENTARY_PANTHEON_PANEL_V1_ANCHOR_", has_type_id = false)]
+    public enum Anchor {
+        TOP,
+        BOTTOM,
+        LEFT,
+        RIGHT,
+    }
+
+    [CCode (cheader_filename = "pantheon-desktop-shell-client-protocol.h", cname = "enum io_elementary_pantheon_panel_v1_hide_mode", cprefix="IO_ELEMENTARY_PANTHEON_PANEL_V1_HIDE_MODE_", has_type_id = false)]
+    public enum HideMode {
+        NEVER,
+        MAXIMIZED_FOCUS_WINDOW,
+        OVERLAPPING_FOCUS_WINDOW,
+        OVERLAPPING_WINDOW,
+        ALWAYS
+    }
+
+    [CCode (cheader_filename = "pantheon-desktop-shell-client-protocol.h", cname = "struct io_elementary_pantheon_panel_v1", cprefix = "io_elementary_pantheon_panel_v1_")]
+    public class Panel : Wl.Proxy {
+        [CCode (cheader_filename = "pantheon-desktop-shell-client-protocol.h", cname = "io_elementary_pantheon_panel_v1_interface")]
+        public static Wl.Interface iface;
+        public void set_user_data (void* user_data);
+        public void* get_user_data ();
+        public uint32 get_version ();
+        public void destroy ();
+        public void set_anchor (Pantheon.Desktop.Anchor anchor);
+        public void focus ();
+        public void set_size (int width, int height);
+        public void set_hide_mode (Pantheon.Desktop.HideMode hide_mode);
+    }
+
+    [CCode (cheader_filename = "pantheon-desktop-shell-client-protocol.h", cname = "struct io_elementary_pantheon_widget_v1", cprefix = "io_elementary_pantheon_widget_v1_")]
+    public class Widget : Wl.Proxy {
+        [CCode (cheader_filename = "pantheon-desktop-shell-client-protocol.h", cname = "io_elementary_pantheon_widget_v1_interface")]
+        public static Wl.Interface iface;
+        public void set_user_data (void* user_data);
+        public void* get_user_data ();
+        public uint32 get_version ();
+        public void destroy ();
+    }
+
+    [CCode (cheader_filename = "pantheon-desktop-shell-client-protocol.h", cname = "struct io_elementary_pantheon_extended_behavior_v1", cprefix = "io_elementary_pantheon_extended_behavior_v1_")]
+    public class ExtendedBehavior : Wl.Proxy {
+        [CCode (cheader_filename = "pantheon-desktop-shell-client-protocol.h", cname = "io_elementary_pantheon_extended_behavior_v1_interface")]
+        public static Wl.Interface iface;
+        public void set_user_data (void* user_data);
+        public void* get_user_data ();
+        public uint32 get_version ();
+        public void destroy ();
+        public void set_keep_above ();
+    }
+}
diff --git a/src/Application.vala b/src/Application.vala
index cd3d6868..25e65f95 100644
--- a/src/Application.vala
+++ b/src/Application.vala
@@ -161,7 +161,7 @@ public class Wingpanel.Application : Gtk.Application {
                 return;
             }
 
-            panel_window.popover_manager.toggle_popover_visible (parameter.get_string ());
+            panel_window.toggle_indicator (parameter.get_string ());
         });
 
         this.add_action (list_indicators_action);
diff --git a/src/PanelWindow.vala b/src/PanelWindow.vala
index b02aaabd..bee88094 100644
--- a/src/PanelWindow.vala
+++ b/src/PanelWindow.vala
@@ -22,6 +22,7 @@ public class Wingpanel.PanelWindow : Gtk.Window {
 
     private Widgets.Panel panel;
     private Gtk.EventControllerKey key_controller; // For keeping in memory
+    private Gtk.GestureMultiPress gesture_controller; // For keeping in memory
     private Gtk.Revealer revealer;
     private int monitor_number;
     private int monitor_width;
@@ -31,6 +32,9 @@ public class Wingpanel.PanelWindow : Gtk.Window {
     private int panel_height;
     private bool expanded = false;
 
+    private Pantheon.Desktop.Shell? desktop_shell;
+    private Pantheon.Desktop.Panel? desktop_panel;
+
     public PanelWindow (Gtk.Application application) {
         Object (
             application: application,
@@ -82,6 +86,16 @@ public class Wingpanel.PanelWindow : Gtk.Window {
         key_controller = new Gtk.EventControllerKey (this);
         key_controller.key_pressed.connect (on_key_pressed);
 
+        gesture_controller = new Gtk.GestureMultiPress (this) {
+            propagation_phase = CAPTURE
+        };
+
+        gesture_controller.pressed.connect (() => {
+            if (desktop_panel != null) {
+                desktop_panel.focus ();
+            }
+        });
+
         if (!Utils.is_wayland ()) {
             panel.size_allocate.connect (update_panel_dimensions);
         }
@@ -95,6 +109,9 @@ public class Wingpanel.PanelWindow : Gtk.Window {
         Services.BackgroundManager.initialize (this.monitor_number, panel_height);
         revealer.transition_type = SLIDE_DOWN;
         revealer.reveal_child = true;
+
+        // We have to wrap in Idle otherwise the Meta.Window of the WaylandSurface in Gala is still null
+        Idle.add_once (init_wl);
     }
 
     private void update_panel_dimensions () {
@@ -103,9 +120,8 @@ public class Wingpanel.PanelWindow : Gtk.Window {
         monitor_number = screen.get_primary_monitor ();
         Gdk.Rectangle monitor_dimensions;
         if (Utils.is_wayland ()) {
-            // TODO: Wayland doesn't have a concept of a primary monitor and so the GDK
-            // call doesn't work, so we need to write some kind of WM interface to get this
-            monitor_dimensions = get_display ().get_monitor (0).get_geometry ();
+            // We just use our monitor because Gala makes sure we are always on the primary one
+            monitor_dimensions = get_display ().get_monitor_at_window (get_window ()).get_geometry ();
         } else {
             monitor_dimensions = get_display ().get_primary_monitor ().get_geometry ();
         }
@@ -214,4 +230,46 @@ public class Wingpanel.PanelWindow : Gtk.Window {
             this.resize (monitor_width, 1);
         }
     }
+
+    public void toggle_indicator (string name) {
+        popover_manager.toggle_popover_visible (name);
+
+        if (desktop_panel != null) {
+            desktop_panel.focus ();
+        }
+    }
+
+    public void registry_handle_global (Wl.Registry wl_registry, uint32 name, string @interface, uint32 version) {
+        if (@interface == "io_elementary_pantheon_shell_v1") {
+            desktop_shell = wl_registry.bind<Pantheon.Desktop.Shell> (name, ref Pantheon.Desktop.Shell.iface, uint32.min (version, 1));
+            unowned var window = get_window ();
+            if (window is Gdk.Wayland.Window) {
+                unowned var wl_surface = ((Gdk.Wayland.Window) window).get_wl_surface ();
+                desktop_panel = desktop_shell.get_panel (wl_surface);
+                desktop_panel.set_anchor (TOP);
+                desktop_panel.set_hide_mode (NEVER);
+                desktop_panel.set_size (-1, get_allocated_height ());
+
+                Idle.add_once (update_panel_dimensions); // Update again since we now can be 100% sure that we are on the primary monitor
+            }
+        }
+    }
+
+    private static Wl.RegistryListener registry_listener;
+    private void init_wl () {
+        registry_listener.global = registry_handle_global;
+        unowned var display = Gdk.Display.get_default ();
+        if (display is Gdk.Wayland.Display) {
+            unowned var wl_display = ((Gdk.Wayland.Display) display).get_wl_display ();
+            var wl_registry = wl_display.get_registry ();
+            wl_registry.add_listener (
+                registry_listener,
+                this
+            );
+
+            if (wl_display.roundtrip () < 0) {
+                return;
+            }
+        }
+    }
 }
diff --git a/src/meson.build b/src/meson.build
index 1ad0597d..d9ca1250 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -15,8 +15,11 @@ wingpanel_files = files(
 wingpanel_deps = [
     libwingpanel_dep,
     granite_dep,
+    gdk_wl_dep,
     gdk_x11_dep,
-    posix_dep
+    posix_dep,
+    wl_client_dep,
+    pantheon_desktop_shell_dep
 ]
 
 executable(meson.project_name(),
diff --git a/vapi/gdk-wayland-3.0.vapi b/vapi/gdk-wayland-3.0.vapi
new file mode 100644
index 00000000..f38aab43
--- /dev/null
+++ b/vapi/gdk-wayland-3.0.vapi
@@ -0,0 +1,16 @@
+[CCode (cheader_filename = "gdk/gdkwayland.h")]
+namespace Gdk.Wayland {
+    [CCode (type_id = "GDK_TYPE_WAYLAND_WINDOW", type_check_function = "GDK_IS_WAYLAND_WINDOW")]
+    public class Window : Gdk.Window {
+        protected Window ();
+
+        public unowned Wl.Surface get_wl_surface ();
+    }
+
+    [CCode (type_id = "GDK_TYPE_WAYLAND_DISPLAY", type_check_function = "GDK_IS_WAYLAND_DISPLAY")]
+    public class Display : Gdk.Display {
+        protected Display ();
+
+        public unowned Wl.Display get_wl_display ();
+    }
+}
From 8d5c92b68667ebba4e0a901ea6d2fce4547a7caa Mon Sep 17 00:00:00 2001
From: Leonhard <106322251+leolost2605@users.noreply.github.com>
Date: Tue, 28 May 2024 21:43:03 +0200
Subject: [PATCH] wayland: Don't use the revealer (#538)

---
 src/PanelWindow.vala | 11 ++++++-----
 1 file changed, 6 insertions(+), 5 deletions(-)

diff --git a/src/PanelWindow.vala b/src/PanelWindow.vala
index bee88094..38fe19b2 100644
--- a/src/PanelWindow.vala
+++ b/src/PanelWindow.vala
@@ -96,15 +96,16 @@ public class Wingpanel.PanelWindow : Gtk.Window {
             }
         });
 
-        if (!Utils.is_wayland ()) {
-            panel.size_allocate.connect (update_panel_dimensions);
-        }
+        panel.size_allocate.connect (update_panel_dimensions);
     }
 
     private void on_realize () {
         // realize isn't called when reveal_child is false, so we set true, then
-        // false, then true again to animate
-        revealer.reveal_child = false;
+        // false, then true again to animate. On wayland we are animated in by gala
+        // so we just want the revealer to always reveal.
+        if (!Utils.is_wayland ()) {
+            revealer.reveal_child = false;
+        }
         update_panel_dimensions ();
         Services.BackgroundManager.initialize (this.monitor_number, panel_height);
         revealer.transition_type = SLIDE_DOWN;
From 2a1a0d9cb60fc36189d4a2f62d9e2518a6bc0ced Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Corentin=20No=C3=ABl?= <tintou@noel.tf>
Date: Thu, 30 May 2024 22:56:13 +0200
Subject: [PATCH] PanelWindow: send the right size to the compositor

Multiply the size with the scale factor to have the pixel size.
---
 src/PanelWindow.vala | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/PanelWindow.vala b/src/PanelWindow.vala
index 38fe19b2..0335ef5f 100644
--- a/src/PanelWindow.vala
+++ b/src/PanelWindow.vala
@@ -249,7 +249,7 @@ public class Wingpanel.PanelWindow : Gtk.Window {
                 desktop_panel = desktop_shell.get_panel (wl_surface);
                 desktop_panel.set_anchor (TOP);
                 desktop_panel.set_hide_mode (NEVER);
-                desktop_panel.set_size (-1, get_allocated_height ());
+                desktop_panel.set_size (-1, get_allocated_height () * get_scale_factor ());
 
                 Idle.add_once (update_panel_dimensions); // Update again since we now can be 100% sure that we are on the primary monitor
             }
From aaba38e3e803d29a4ac9e78344a2b843ec9d7b65 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Corentin=20No=C3=ABl?= <tintou@noel.tf>
Date: Thu, 30 May 2024 23:05:47 +0200
Subject: [PATCH] PanelWindow: Use the right geometry on wayland
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

For some reason, the returned geometry is not in Application size as it should…
---
 src/PanelWindow.vala | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/src/PanelWindow.vala b/src/PanelWindow.vala
index 0335ef5f..9eca83c4 100644
--- a/src/PanelWindow.vala
+++ b/src/PanelWindow.vala
@@ -123,6 +123,10 @@ public class Wingpanel.PanelWindow : Gtk.Window {
         if (Utils.is_wayland ()) {
             // We just use our monitor because Gala makes sure we are always on the primary one
             monitor_dimensions = get_display ().get_monitor_at_window (get_window ()).get_geometry ();
+            monitor_dimensions.width /= get_scale_factor ();
+            monitor_dimensions.height /= get_scale_factor ();
+            monitor_dimensions.x /= get_scale_factor ();
+            monitor_dimensions.y /= get_scale_factor ();
         } else {
             monitor_dimensions = get_display ().get_primary_monitor ().get_geometry ();
         }
