diff '--color=auto' -Naur quick-settings-1.2.0_orig/meson.build quick-settings-1.2.0/meson.build
--- quick-settings-1.2.0_orig/meson.build	2025-04-20 20:04:19.809550271 +0200
+++ quick-settings-1.2.0/meson.build	2025-04-20 20:05:01.810023234 +0200
@@ -20,7 +20,6 @@
 granite_dep = dependency('granite', version: '>=6.0.0')
 gtk_dep = dependency('gtk+-3.0')
 handy_dep = dependency('libhandy-1', version: '>=1.0')
-packagekit_dep = dependency('packagekit-glib2')
 wingpanel_dep = dependency('wingpanel')
 wingpanel_indicatorsdir = wingpanel_dep.get_pkgconfig_variable('indicatorsdir', define_variable: ['libdir', libdir])
 wl_client_dep = dependency('wayland-client')
diff '--color=auto' -Naur quick-settings-1.2.0_orig/src/meson.build quick-settings-1.2.0/src/meson.build
--- quick-settings-1.2.0_orig/src/meson.build	2025-04-20 20:04:19.822883755 +0200
+++ quick-settings-1.2.0/src/meson.build	2025-04-20 20:05:01.810023234 +0200
@@ -43,7 +43,6 @@
         gtk_dep,
         handy_dep,
         wingpanel_dep,
-        packagekit_dep,
         pantheon_desktop_shell_dep,
         portal_dep,
         wl_client_dep,
diff '--color=auto' -Naur quick-settings-1.2.0_orig/src/meson.build.orig quick-settings-1.2.0/src/meson.build.orig
--- quick-settings-1.2.0_orig/src/meson.build.orig	1970-01-01 01:00:00.000000000 +0100
+++ quick-settings-1.2.0/src/meson.build.orig	2025-04-19 16:49:11.000000000 +0200
@@ -0,0 +1,54 @@
+config_data = configuration_data()
+config_data.set_quoted('LOCALEDIR', join_paths(get_option('prefix'), get_option('localedir')))
+config_data.set_quoted('GETTEXT_PACKAGE', meson.project_name())
+config_file = configure_file(
+    input: 'Config.vala.in',
+    output: '@BASENAME@',
+    configuration: config_data
+)
+
+sources = [
+    'Indicator.vala',
+    'PopoverWidget.vala',
+    'DBus' / 'EndSessionDialogServer.vala',
+    'DBus' / 'LockInterface.vala',
+    'DBus' / 'SeatInterface.vala',
+    'DBus' / 'SensorProxy.vala',
+    'DBus' / 'SessionInterface.vala',
+    'DBus' / 'SystemInterface.vala',
+    'DBus' / 'UserInterface.vala',
+    'Services' / 'UserManager.vala',
+    'Widgets' / 'CurrentUser.vala',
+    'Widgets' / 'DarkModeToggle.vala',
+    'Widgets' / 'EndSessionDialog.vala',
+    'Widgets' / 'PreventSleepToggle.vala',
+    'Widgets' / 'RotationToggle.vala',
+    'Widgets' / 'SettingsToggle.vala',
+    'Widgets' / 'SessionBox.vala',
+    'Widgets' / 'TextScale.vala',
+    'Widgets' / 'UserList.vala',
+    'Widgets' / 'UserRow.vala',
+]
+
+shared_module(
+    'quick-settings',
+    config_file,
+    gresource,
+    sources,
+    dependencies: [
+        gdk_wl_dep,
+        glib_dep,
+        gobject_dep,
+        granite_dep,
+        gtk_dep,
+        handy_dep,
+        wingpanel_dep,
+        packagekit_dep,
+        pantheon_desktop_shell_dep,
+        portal_dep,
+        wl_client_dep,
+        accountsservice_dep
+    ],
+    install: true,
+    install_dir : wingpanel_indicatorsdir
+)
diff '--color=auto' -Naur quick-settings-1.2.0_orig/src/Widgets/EndSessionDialog.vala quick-settings-1.2.0/src/Widgets/EndSessionDialog.vala
--- quick-settings-1.2.0_orig/src/Widgets/EndSessionDialog.vala	2025-04-20 20:04:19.822883755 +0200
+++ quick-settings-1.2.0/src/Widgets/EndSessionDialog.vala	2025-04-20 20:26:20.874509941 +0200
@@ -87,7 +87,6 @@
         if (dialog_type == EndSessionDialogType.RESTART) {
             var confirm_restart = new Gtk.Button.with_label (_("Restart"));
             confirm_restart.clicked.connect (() => {
-                set_offline_trigger (REBOOT); // This will just do nothing if no updates are available
                 reboot ();
                 destroy ();
             });
@@ -108,25 +107,6 @@
         grid.attach (image, 0, 0, 1, 2);
         grid.attach (primary_label, 1, 0);
         grid.attach (secondary_label, 1, 1);
-
-        if (dialog_type != LOGOUT) {
-            bool has_prepared_updates = false;
-            try {
-                has_prepared_updates = Pk.offline_get_prepared_ids ().length > 0;
-            } catch (Error e) {
-                warning ("Failed to check for prepared updates, assuming no: %s", e.message);
-            }
-
-            if (has_prepared_updates) {
-                updates_check_button = new Gtk.CheckButton () {
-                    active = true,
-                    label = _("Install pending system updates"),
-                    margin_top = 16
-                };
-                grid.attach (updates_check_button, 1, 2);
-            }
-        }
-
         grid.attach (action_area, 0, 3, 2);
 
         grid.show_all ();
@@ -163,11 +143,7 @@
 
         confirm.clicked.connect (() => {
             if (dialog_type == EndSessionDialogType.RESTART || dialog_type == EndSessionDialogType.SHUTDOWN) {
-                if (set_offline_trigger (POWER_OFF)) {
-                    reboot ();
-                } else {
-                    shutdown ();
-                }
+                shutdown ();
             } else {
                 logout ();
             }
@@ -178,31 +154,6 @@
         realize.connect (() => Idle.add_once (() => init_wl ()));
     }
 
-    private bool set_offline_trigger (Pk.OfflineAction action) {
-        if (updates_check_button == null) {
-            return false;
-        }
-
-        if (updates_check_button.active) {
-            try {
-                Pk.offline_trigger (action);
-                return true;
-            } catch (Error e) {
-                critical ("Failed to set offline trigger for updates: %s", e.message);
-            }
-        } else {
-            try {
-                if (Pk.offline_get_action () != UNSET) {
-                    Pk.offline_cancel ();
-                }
-            } catch (Error e) {
-                critical ("Failed to check/cancel offline trigger for updates: %s", e.message);
-            }
-        }
-
-        return false;
-    }
-
     public void registry_handle_global (Wl.Registry wl_registry, uint32 name, string @interface, uint32 version) {
         if (@interface == "io_elementary_pantheon_shell_v1") {
             var desktop_shell = wl_registry.bind<Pantheon.Desktop.Shell> (name, ref Pantheon.Desktop.Shell.iface, uint32.min (version, 1));
