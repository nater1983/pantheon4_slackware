diff --git a/build-aux/library.js b/build-aux/library.js
index ec18b355e..c0a10ed73 100755
--- a/build-aux/library.js
+++ b/build-aux/library.js
@@ -226,25 +226,24 @@
   }
 }
 
-const key_file = new GLib.KeyFile();
-key_file.load_from_file("/.flatpak-info", GLib.KeyFileFlags.NONE);
-// runtime/org.gnome.Sdk/x86_64/master
-const [, , , runtime_version] = key_file
-  .get_string("Application", "runtime")
-  .split("/");
-
+
+
 function isDemoCompatible(demo) {
   const demo_runtime_version = demo["runtime-version"];
 
-  if (demo_runtime_version === "master") {
-    return runtime_version === "master";
-  } else if (runtime_version === "master") {
+
+
+  if (!demo_runtime_version) {
     return true;
-  } else if (!demo_runtime_version) {
+  }
+
+
+  if (demo_runtime_version === "master") {
     return true;
   }
 
-  return +runtime_version >= +demo_runtime_version;
+
+  return true;
 }
 
 loop.run();
 ---
diff --git a/src/Extensions/Extensions.js b/src/Extensions/Extensions.js
index 694fb19f9..0cdf717f0 100644
--- a/src/Extensions/Extensions.js
+++ b/src/Extensions/Extensions.js
@@ -81,8 +81,17 @@ export function isTypeScriptAvailable() {
 
 const llvm = "llvm18";
 const node = "node20";
-const runtime = getFlatpakInfo().get_string("Application", "runtime");
-const freedesktop_version = runtime.endsWith("master") ? "24.08" : "24.08";
+
+let freedesktop_version = "24.08";
+try {
+  const flatpak_info = getFlatpakInfo();
+  if (flatpak_info) {
+    const runtime = flatpak_info.get_string("Application", "runtime");
+    freedesktop_version = runtime && runtime.endsWith("master") ? "24.08" : "24.08";
+  }
+} catch (err) {
+  log(`Flatpak runtime info unavailable: ${err}`);
+}
 
 export function isTypeScriptEnabled() {
   return settings.get_boolean("typescript");
diff --git a/src/Permissions/Permissions.js b/src/Permissions/Permissions.js
index 53907d477..ab9929b3d 100644
--- a/src/Permissions/Permissions.js
+++ b/src/Permissions/Permissions.js
@@ -50,10 +50,17 @@ export function Permissions({ window }) {
 }
 
 const missing_permissions = (() => {
-  const flatpak_info = getFlatpakInfo();
-  const shared = flatpak_info.get_string_list("Context", "shared");
-  const sockets = flatpak_info.get_string_list("Context", "sockets");
-  const devices = flatpak_info.get_string_list("Context", "devices");
+  let shared = [], sockets = [], devices = [];
+  try {
+    const flatpak_info = getFlatpakInfo();
+    if (flatpak_info) {
+      shared = flatpak_info.get_string_list("Context", "shared");
+      sockets = flatpak_info.get_string_list("Context", "sockets");
+      devices = flatpak_info.get_string_list("Context", "devices");
+    }
+  } catch (_) {
+
+  }
 
   return (
     !shared.includes("network") ||
diff --git a/src/Previewer/DBusPreviewer.js b/src/Previewer/DBusPreviewer.js
index d56e9f891..0836a2936 100644
--- a/src/Previewer/DBusPreviewer.js
+++ b/src/Previewer/DBusPreviewer.js
@@ -10,6 +10,16 @@ const nodeInfo = Gio.DBusNodeInfo.new_for_xml(previewer_xml);
 const interface_info = nodeInfo.interfaces[0];
 
 const guid = Gio.dbus_generate_guid();
+const path_dir = buildRuntimePath();
+
+try {
+  Gio.File.new_for_path(path_dir).make_directory_with_parents(null);
+} catch (err) {
+  if (!err.matches(Gio.IOErrorEnum, Gio.IOErrorEnum.EXISTS)) {
+    throw err;
+  }
+}
+
 const path = buildRuntimePath(`workbench_preview_dbus_socket_${Date.now()}`);
 const server = Gio.DBusServer.new_sync(
   `unix:path=${path}`,

diff --git a/src/flatpak.js b/src/flatpak.js
index fc4d5f277..53e1f7f2c 100644
--- a/src/flatpak.js
+++ b/src/flatpak.js
@@ -16,18 +16,32 @@ export function getFlatpakInfo() {
 }
 
 export function getFlatpakId() {
-  return getFlatpakInfo().get_string("Application", "name");
+  try {
+    const info = getFlatpakInfo();
+    if (info) {
+      return info.get_string("Application", "name");
+    }
+  } catch (err) {
+    log(`No Flatpak Application group in /.flatpak-info: ${err}`);
+  }
+
+  return "re.sonny.Workbench";
 }
 
 // https://repology.org/project/flatpak/versions
 export function isDeviceInputOverrideAvailable(flatpak_version) {
-  flatpak_version ??= getFlatpakInfo().get_string(
-    "Instance",
-    "flatpak-version",
-  );
+  try {
+    flatpak_version ??= getFlatpakInfo()?.get_string(
+      "Instance",
+      "flatpak-version",
+    );
+  } catch (_) {
+    return false;
+  }
 
   // https://github.com/flatpak/flatpak/releases/tag/1.15.6
   return (
+    flatpak_version &&
     flatpak_version.localeCompare("1.15.6", undefined, {
       numeric: true,
       sensitivity: "base",
