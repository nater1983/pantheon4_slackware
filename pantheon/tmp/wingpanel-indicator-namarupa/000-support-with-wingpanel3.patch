 README.md                 | 55 ++++++++++++++++++++++++++-------
 debian/changelog          |  6 ++++
 debian/control            |  2 +-
 meson.build               |  7 +++--
 src/AyatanaIndicator.vala | 79 ++++++++++++++++++++++++++++-------------------
 src/Indicator.vala        | 12 +++----
 7 files changed, 115 insertions(+), 53 deletions(-)

diff --git a/README.md b/README.md
index c1ce54c..0e3b29c 100755
--- a/README.md
+++ b/README.md
@@ -8,7 +8,13 @@ The name Namarupa is used for the forces at play that govern the Ayatana, in Bud
 
 ## Before Installation
 
-You need to add Pantheon to the list of desktops abled to work with indicators:  
+Version odin (eos6) you need indicator-application:
+
+```bash
+sudo apt-get install indicator-application
+```
+
+(All versions)You need to add Pantheon to the list of desktops abled to work with indicators:  
 
 - With autostart (thanks to JMoerman)  
 
@@ -16,26 +22,49 @@ System settings -> "Applications" -> "Startup" -> "Add Startup Appâ€¦" -> "Type
 
 Add /usr/lib/x86_64-linux-gnu/indicator-application/indicator-application-service as custom command to the auto start applications in the system settings  
 
-- With a patch
-
-Install [this patched indicator-applications debian file](https://github.com/mdh34/elementary-indicators/releases) 
-
-**reboot**  
+- With a terminal 
+Open Terminal and run the following commands.
+<pre>mkdir -p ~/.config/autostart
+cp /etc/xdg/autostart/indicator-application.desktop ~/.config/autostart/
+sed -i 's/^OnlyShowIn.*/OnlyShowIn=Unity;GNOME;Pantheon;/' ~/.config/autostart/indicator-application.desktop
+</pre><br/>
+ 
 
 ### Easy install for users
 
-Install the latest debian file (com.github.donadigo.wingpanel-indicator-namarupa_1.0.0_amd64.deb) try a double-click or use dpkg :  
-`sudo dpkg -i com.github.donadigo.wingpanel-indicator-namarupa_1.0.0_amd64.deb `
+Install the latest debian file :
+
+- Hera(eos5) and previous: <a href="https://github.com/Lafydev/wingpanel-indicator-namarupa/blob/master/com.github.donadigo.wingpanel-indicator-namarupa_1.0.0_amd64.deb">com.github.*amd_64.deb </a>
+- Odin(eos6): <a href="https://github.com/Lafydev/wingpanel-indicator-namarupa/blob/master/com.github.donadigo.wingpanel-indicator-namarupa_1.0.3_odin.deb">com.github.*odin.deb </a>
+  try a double-click or use GDebi or dpkg :
+  <pre>sudo dpkg -i ./com.github.donadigo.wingpanel*.deb</pre>
+ 
+Easy uninstall after easy install:
+<pre>sudo dpkg -r com.github.donadigo.wingpanel-indicator-namarupa</pre>
+reboot or kill wingpanel
+  
 
 ### For developers
 
 You'll need the following dependencies:
 
 ```bash
-sudo apt-get install libglib2.0-dev libgranite-dev libindicator3-dev libwingpanel-2.0-dev 
+sudo apt-get install libglib2.0-dev libgranite-dev libindicator3-dev 
 valac gcc meson
 ```
 
+- Version Hera(eos5) and previous :  
+  
+  ```bash
+  sudo apt-get install libwingpanel-2.0-dev
+  ```
+
+- Version odin(eos6) : 
+  
+  ```bash
+  sudo apt-get install libwingpanel-dev 
+  ```
+
 Run meson to configure the build environment and then ninja to build:
 
 ```bash
@@ -49,6 +78,10 @@ To install, use ninja install:
 sudo ninja install
 ```
 
-Reboot or kill and let wingpanel come back:
+Reboot or kill wingpanel
 
-`killall wingpanel` 
+To uninstall with ninja:
+Open a terminal in the build folder.
+<pre>sudo ninja uninstall</pre>
+Version Hera(5) and previous:  <pre>killall wingpanel</pre>
+Version Odin(6): <pre>killall io.elementary.wingpanel</pre>
diff --git a/debian/changelog b/debian/changelog
index 3bb4e34..9fc5f39 100644
--- a/debian/changelog
+++ b/debian/changelog
@@ -1,3 +1,9 @@
+com.github.donadigo.wingpanel-indicator-namarupa (1.0.2) focal; urgency=medium
+
+  * New release : fix image missing 
+
+ -- lafy <lafy@mailo.com>  Tue, 24 Aug 2021 11:05:59 +0200
+
 com.github.donadigo.wingpanel-indicator-namarupa (1.0.0) bionic; urgency=medium
 
   * Initial release.
diff --git a/debian/control b/debian/control
index 24742fe..c55f6f8 100644
--- a/debian/control
+++ b/debian/control
@@ -7,7 +7,7 @@ Build-Depends: debhelper (>= 10.5.1),
                libgranite-dev,
                libgtk-3-dev (>= 3.12),
                libindicator3-dev,
-               libwingpanel-2.0-dev,
+               libwingpanel-2.0-dev | libwingpanel-dev,
                meson,
                valac (>= 0.40.0)
 Standards-Version: 3.9.6
diff --git a/meson.build b/meson.build
index 72f8928..0f9aa43 100644
--- a/meson.build
+++ b/meson.build
@@ -10,8 +10,11 @@ gettext_name = meson.project_name() + '-indicator'
 add_global_arguments('-DGETTEXT_PACKAGE="@0@"'.format(gettext_name), language:'c')
 add_project_arguments(['--vapidir', join_paths(meson.current_source_dir(), 'vapi')], language: 'vala')
 
-wingpanel_dep = dependency('wingpanel-2.0')
-
+wingpanel_dep= dependency('wingpanel-2.0',required : false)
+if not wingpanel_dep.found()
+    wingpanel_dep = dependency('wingpanel',required : true)
+endif
+    
 indicator_dir_cmd = run_command('pkg-config', 'indicator3-0.4', '--variable=indicatordir')
 if indicator_dir_cmd.returncode() != 0
   message ('Indicator directory not found')
diff --git a/src/AyatanaIndicator.vala b/src/AyatanaIndicator.vala
index de4292d..b446d26 100755
--- a/src/AyatanaIndicator.vala
+++ b/src/AyatanaIndicator.vala
@@ -224,15 +224,15 @@ public class AyatanaCompatibility.Indicator : IndicatorButton {
     private Gtk.Widget? convert_menu_widget (Gtk.Widget item) {
         /* separator are GTK.SeparatorMenuItem, return a separator */
         if (item is Gtk.SeparatorMenuItem) {
-            var seperator =  new Wingpanel.Widgets.Separator ();
+            var separator =  new Gtk.Separator (Gtk.Orientation.HORIZONTAL);
 
-            connect_signals (item, seperator);
+            connect_signals (item, separator);
 
-            return seperator;
+            return separator;
         }
 
         /* all other items are genericmenuitems */
-        string label = (item as Gtk.MenuItem).get_label ();
+        string label = ((Gtk.MenuItem)item).get_label ();
         label = label.replace ("_", "");
 
         /*
@@ -248,14 +248,13 @@ public class AyatanaCompatibility.Indicator : IndicatorButton {
         var item_type = val.get_int ();
 
         var state = item.get_state_flags ();
-        var active = (item as Gtk.CheckMenuItem).get_active ();
 
 		//RAZ group_radio
        group_radio = (item_type == ATK_RADIO)? group_radio:null;
 		
         /* detect if it has a image */
         Gtk.Image? image = null;
-        var child = (item as Gtk.Bin).get_child ();
+        var child = ((Gtk.Bin)item).get_child ();
 
         if (child != null) {
             if (child is Gtk.Image) {
@@ -266,21 +265,29 @@ public class AyatanaCompatibility.Indicator : IndicatorButton {
         }
 
         if (item_type == ATK_CHECKBOX) {
-            var button = new Wingpanel.Widgets.Switch (label, active);
-            button.get_switch ().state_set.connect ((b) => {
-                (item as Gtk.CheckMenuItem).set_active (b);
-                //  close ();
-
-                return false;
+            
+			var box_switch = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 5);
+			var lbl = new Gtk.Label (label);
+            var button = new Gtk.Switch ();
+			box_switch.pack_start (lbl, true, true, 5);
+			box_switch.pack_end (button, false, false, 5);
+			lbl.set_halign (Gtk.Align.START); 
+			lbl.margin_start = 6;
+			//init
+			var active= ((Gtk.CheckMenuItem)item).get_active ();
+			button.set_active(active);
+
+			button.state_set.connect ((b) => {
+                ((Gtk.CheckMenuItem)item).set_active (b);
+				return(false);
             });
-            button.set_state_flags (state, false);
 
-            connect_signals (item, button);
-            (item as Gtk.CheckMenuItem).toggled.connect (() => {
-                button.active = ((item as Gtk.CheckMenuItem).get_active ());
+			connect_signals (item, button);
+            ((Gtk.CheckMenuItem)item).toggled.connect (() => {
+                button.active = ((Gtk.CheckMenuItem)item).get_active ();
             });
 
-            return button;
+            return box_switch;
         }
 
 		//RADIO BUTTON
@@ -292,18 +299,18 @@ public class AyatanaCompatibility.Indicator : IndicatorButton {
 		    if (group_radio == null) {
 		        group_radio = button;
 		    }
-		    
-	            button.set_active(active);
+		    var active= ((Gtk.CheckMenuItem)item).get_active ();
+	        button.set_active(active);
 			
 		    // do not remove
-                  button.clicked.connect (() => {
-                        item.activate ();
-                  });
+			button.clicked.connect (() => {
+				item.activate ();
+			});
 			
 		    button.activate.connect (() => {
-			item.activate();
-                       (item as Gtk.RadioMenuItem).set_active (button.get_active ());
-                   });
+				item.activate();
+				((Gtk.RadioMenuItem)item).set_active (button.get_active ());
+            });
 			
 		    return button;
 		}
@@ -322,16 +329,22 @@ public class AyatanaCompatibility.Indicator : IndicatorButton {
             }
 			button = new Gtk.ModelButton();
 			button.text = label;
+			var hbox = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 3);
             if (image != null && image.pixbuf != null) {
-                (button as Gtk.ModelButton).icon = (image.pixbuf);
+				var img= new Gtk.Image.from_pixbuf(image.pixbuf);
+				
+				hbox.add(button);
+				hbox.add(img);
+				//Modelbutton = text OR icon not both
+                //button.icon = (image.pixbuf);
             } 
-            (item as Gtk.CheckMenuItem).notify["label"].connect (() => {
-                (button as Gtk.ModelButton).text = ((item as Gtk.MenuItem).get_label ().replace ("_", ""));
+            ((Gtk.CheckMenuItem)item).notify["label"].connect (() => {
+                button.text = ((Gtk.MenuItem)item).get_label ().replace ("_", "");
             });
 
             button.set_state_flags (state, true);
 
-            var submenu = (item as Gtk.MenuItem).submenu;
+            var submenu = ((Gtk.MenuItem)item).submenu;
 			var sub_list = new Gtk.ListBox ();
 			
             if (submenu != null) {
@@ -347,7 +360,7 @@ public class AyatanaCompatibility.Indicator : IndicatorButton {
                     main_stack.set_visible_child (main_grid);
                 });
                 sub_list.add (back_button);
-                sub_list.add (new Wingpanel.Widgets.Separator ());
+                sub_list.add (new Gtk.Separator (Gtk.Orientation.HORIZONTAL));
 				
 				//adding submenu items
 				foreach (var sub_item in submenu.get_children ()) {
@@ -392,8 +405,10 @@ public class AyatanaCompatibility.Indicator : IndicatorButton {
             }
 
             connect_signals (item, button);
-
-            return button;
+			if ((image != null && image.pixbuf != null)) {
+				return hbox;}
+            else {return button;}
+            
         }
 
         return null;
diff --git a/src/Indicator.vala b/src/Indicator.vala
index 90cff31..57f54fa 100755
--- a/src/Indicator.vala
+++ b/src/Indicator.vala
@@ -25,9 +25,7 @@ public class AyatanaCompatibility.MetaIndicator : Wingpanel.Indicator {
 	public int cpt = 0; /* count indicators */
 	
     public MetaIndicator () {
-        Object (code_name: "namarupa",
-                display_name: _("Namarupa"),
-                description:_("Ayatana Compatibility Meta Indicator"));
+        Object (code_name: "namarupa");
 
         load_blacklist ();
         indicator_loader = new IndicatorFactory ();
@@ -119,7 +117,7 @@ public class AyatanaCompatibility.MetaIndicator : Wingpanel.Indicator {
             settings_btn.text = _("Settingsâ€¦");
             settings_btn.clicked.connect (show_settings);
 
-            main_box.add (new Wingpanel.Widgets.Separator ());
+            main_box.add (new Gtk.Separator (Gtk.Orientation.HORIZONTAL));
             main_box.add (settings_btn);
         
 
@@ -182,14 +180,14 @@ public class AyatanaCompatibility.MetaIndicator : Wingpanel.Indicator {
     private void show_settings () {
 		/* temporary used for informations */
 		string msg = cpt.to_string () + " item(s)\n";
-		var msgdial = new Gtk.MessageDialog (null,
-		                                     Gtk.DialogFlags.MODAL,
+		/*var msgdial = new Gtk.MessageDialog (null,
+		                                     Gtk.DialogFlags.DESTROY_WITH_PARENT,
                                                    Gtk.MessageType.INFO,
                                                    Gtk.ButtonsType.CLOSE,
                                                    msg);
 		msgdial.set_title (_("Information"));
 		msgdial.run ();
-		msgdial.destroy (); // dialog without parent => not perfectly closed
+		msgdial.destroy (); // dialog without parent => not perfectly closed */
 
         /*try {
             AppInfo.launch_default_for_uri ("settings://namarupa", null);
