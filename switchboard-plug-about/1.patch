From ef49ed7e718e4a81b226a26801f199e46ce9b67f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Corentin=20No=C3=ABl?= <tintou@noel.tf>
Date: Fri, 24 Feb 2023 11:43:41 +0100
Subject: [PATCH 030/240] HardwareView: Reuse translations from GLib (#260)

Allows to not have duplicates of the string already availables.
---
 src/Views/HardwareView.vala | 15 ++++++---------
 1 file changed, 6 insertions(+), 9 deletions(-)

diff --git a/src/Views/HardwareView.vala b/src/Views/HardwareView.vala
index 5f221a092..a36c3d790 100644
--- a/src/Views/HardwareView.vala
+++ b/src/Views/HardwareView.vala
@@ -590,27 +590,24 @@ public class About.HardwareView : Gtk.Grid {
     private string custom_format_size (uint64 size, bool iec_unit) {
         uint divisor = iec_unit ? 1024 : 1000;
 
-        string[] units = {_("KB"), _("MB"), _("GB"), _("TB"), _("PB")};
+        const string[] UNITS = {"kB", "MB", "GB", "TB", "PB", "EB"};
 
         int unit_index = 0;
 
-        while ((size / divisor) > 0 && (unit_index < units.length)) {
+        while ((size / divisor) > 0 && (unit_index < UNITS.length)) {
             unit_index++;
             size /= divisor;
         }
 
-        string unit;
+        unowned string unit;
 
         if (unit_index == 0) {
-            // TRANSLATORS: Examples of use: "1 byte", "2 bytes"
-            unit = ngettext ("byte", "bytes", (ulong) size);
+            unit = dngettext ("glib20", "byte", "bytes", (ulong) size);
         } else {
-            unit = units[unit_index - 1];
+            unit = dgettext ("glib20", UNITS[unit_index - 1]);
         }
 
-        /* TRANSLATORS: The first "%llu" is replaced with the value, the "%s" with a unit of the value.
-           The order can be changed with "%$2s %$1llu". An example: "2 bytes" */
-        return _("%llu %s").printf (size, unit);
+        return dpgettext2 ("glib20", "format-size", "%u %s").printf ((uint) size, unit);
     }
 }

From f36d02fb5e711cbd29522214380294960fc30f6f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Corentin=20No=C3=ABl?= <tintou@noel.tf>
Date: Fri, 24 Feb 2023 14:03:24 +0100
Subject: [PATCH 036/240] HardwareView: Support GLib < 2.73 translation (#265)

It is required as we _only_ have 2.72 in Jammy
---
 meson.build                 |  6 ++++++
 src/Views/HardwareView.vala | 12 ++++++++++++
 src/meson.build             |  2 +-
 3 files changed, 19 insertions(+), 1 deletion(-)

diff --git a/meson.build b/meson.build
index 62b58cea4..0479fce6d 100644
--- a/meson.build
+++ b/meson.build
@@ -12,6 +12,8 @@ prefix = get_option('prefix')
 datadir = join_paths(prefix, get_option('datadir'))
 libdir = join_paths(prefix, get_option('libdir'))
 
+glib_dep = dependency('glib-2.0', version: '>=2.64.0')
+
 add_project_arguments(
     '-DGETTEXT_PACKAGE="@0@"'.format(gettext_name),
     language:'c'
@@ -26,6 +28,10 @@ if get_option('wallpaper')
     vala_flags += ['--define', 'WALLPAPER']
 endif
 
+if glib_dep.version().version_compare ('>=2.73.0')
+    vala_flags += ['--define', 'HAS_GLIB_2_73']
+endif
+
 add_project_arguments(vala_flags, language: 'vala')
 
 subdir('data')

diff --git a/src/Views/HardwareView.vala b/src/Views/HardwareView.vala
index a36c3d790..1acfecd5c 100644
--- a/src/Views/HardwareView.vala
+++ b/src/Views/HardwareView.vala
@@ -590,7 +590,11 @@ public class About.HardwareView : Gtk.Grid {
     private string custom_format_size (uint64 size, bool iec_unit) {
         uint divisor = iec_unit ? 1024 : 1000;
 
+#if HAS_GLIB_2_73
         const string[] UNITS = {"kB", "MB", "GB", "TB", "PB", "EB"};
+#else
+        const string[] UNITS = {"%.1f kB", "%.1f MB", "%.1f GB", "%.1f TB", "%.1f PB", "%.1f EB"};
+#endif
 
         int unit_index = 0;
 
@@ -602,12 +606,20 @@ public class About.HardwareView : Gtk.Grid {
         unowned string unit;
 
         if (unit_index == 0) {
+#if HAS_GLIB_2_73
             unit = dngettext ("glib20", "byte", "bytes", (ulong) size);
+#else
+            return dngettext ("glib20", "%u byte", "%u bytes", (ulong) size).printf ((uint) size);
+#endif
         } else {
             unit = dgettext ("glib20", UNITS[unit_index - 1]);
         }
 
+#if HAS_GLIB_2_73
         return dpgettext2 ("glib20", "format-size", "%u %s").printf ((uint) size, unit);
+#else
+        return unit.printf ((float) size);
+#endif
     }
 }

diff --git a/src/meson.build b/src/meson.build
index 818af5a4f..d044d0c14 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -29,7 +29,7 @@ shared_module(
     css_gresource,
     dependencies: [
         dependency('fwupd'),
-        dependency('glib-2.0', version: '>=2.64.0'),
+        glib_dep,
         dependency('gio-2.0'),
         dependency('gobject-2.0'),
         dependency('granite'),

From e1d8559c9d172b2f55207188f50a4333aecef2f9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Danielle=20For=C3=A9?= <danielle@elementary.io>
Date: Wed, 10 May 2023 03:55:26 -0700
Subject: [PATCH 062/240] OperatingSystemView: handle missing default wallpaper
 (#258)

* OperatingSystemView: handle missing default wallpaper

* Don't even fuck with that if we don't have a symbolic logo

* wrong line break

* Remove built option and invalid icon name

---------

Co-authored-by: Vishal Rao <vishalrao@gmail.com>
Co-authored-by: Jeremy Wootten <jeremy@elementaryos.org>
Co-authored-by: Ryan Kornheisl <ryan@skarva.tech>
---
 data/OperatingSystemView.css       |  1 +
 meson.build                        |  4 --
 meson_options.txt                  |  1 -
 src/Views/OperatingSystemView.vala | 69 ++++++++++++++++--------------
 4 files changed, 38 insertions(+), 37 deletions(-)
 delete mode 100644 meson_options.txt

diff --git a/data/OperatingSystemView.css b/data/OperatingSystemView.css
index a9f044bf6..75058b3a5 100644
--- a/data/OperatingSystemView.css
+++ b/data/OperatingSystemView.css
@@ -11,4 +11,5 @@ avatar.image {
     -gtk-icon-shadow:
         0 1px 1px alpha(black, 0.3),
         0 2px 3px alpha(@accent_color_900, 0.2);
+    -gtk-icon-style: symbolic;
 }
diff --git a/meson.build b/meson.build
index 0479fce6d..140f19fd7 100644
--- a/meson.build
+++ b/meson.build
@@ -24,10 +24,6 @@ add_project_arguments(['--vapidir', vapi_dir], language: 'vala')
 
 vala_flags = []
 
-if get_option('wallpaper')
-    vala_flags += ['--define', 'WALLPAPER']
-endif
-
 if glib_dep.version().version_compare ('>=2.73.0')
     vala_flags += ['--define', 'HAS_GLIB_2_73']
 endif

diff --git a/meson_options.txt b/meson_options.txt
deleted file mode 100644
index 8cef0bb34..000000000
--- a/meson_options.txt
+++ /dev/null
@@ -1 +0,0 @@
-option('wallpaper', type : 'boolean', value : true, description : 'Overlay logo on default wallpaper')
diff --git a/src/Views/OperatingSystemView.vala b/src/Views/OperatingSystemView.vala
index b8594e009..17e3f2b07 100644
--- a/src/Views/OperatingSystemView.vala
+++ b/src/Views/OperatingSystemView.vala
@@ -39,38 +39,47 @@ public class About.OperatingSystemView : Gtk.Grid {
             logo_icon_name = "distributor-logo";
         }
 
-#if WALLPAPER
-        var logo = new Hdy.Avatar (128, "", false) {
-            // In case the wallpaper can't be loaded, we don't want an icon or text
-            icon_name = "invalid-icon-name",
-            // We need this for the shadow to not get clipped by Gtk.Overlay
-            margin = 6
-        };
-        logo.set_image_load_func ((size) => {
-            try {
-                return new Gdk.Pixbuf.from_file_at_scale ("/usr/share/backgrounds/elementaryos-default", -1, size, true);
-            } catch (Error e) {
-                critical (e.message);
-            }
-        });
-        logo.get_style_context ().add_provider (style_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
-#endif
-
         var icon = new Gtk.Image () {
-            icon_name = logo_icon_name + "-symbolic",
-            // 128 minus 3px padding on each side
-            pixel_size = 128 - 6
+            icon_name = logo_icon_name,
         };
 
-        unowned var icon_style_context = icon.get_style_context ();
-        icon_style_context.add_class ("logo");
-        icon_style_context.add_provider (style_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
-
-#if WALLPAPER
         var logo_overlay = new Gtk.Overlay ();
-        logo_overlay.add (logo);
-        logo_overlay.add_overlay (icon);
-#endif
+
+        if (Gtk.IconTheme.get_default ().has_icon (logo_icon_name + "-symbolic")) {
+            foreach (unowned var path in Environment.get_system_data_dirs ()) {
+                var file = File.new_for_path (
+                    Path.build_path (Path.DIR_SEPARATOR_S, path, "backgrounds", "elementaryos-default")
+                );
+
+                if (file.query_exists ()) {
+                    var file_icon = new FileIcon (file);
+
+                    var logo = new Hdy.Avatar (128, "", false) {
+                        loadable_icon = file_icon,
+                        // We need this for the shadow to not get clipped by Gtk.Overlay
+                        margin = 6
+                    };
+                    logo.get_style_context ().add_provider (style_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
+
+                    logo_overlay.add (logo);
+                    logo_overlay.add_overlay (icon);
+
+                    // 128 minus 3px padding on each side
+                    icon.pixel_size = 128 - 6;
+
+                    unowned var icon_style_context = icon.get_style_context ();
+                    icon_style_context.add_class ("logo");
+                    icon_style_context.add_provider (style_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
+
+                    break;
+                }
+            }
+        }
+
+        if (icon.parent == null) {
+            icon.pixel_size = 128;
+            logo_overlay.add (icon);
+        }
 
         // Intentionally not using GLib.OsInfoKey.PRETTY_NAME here because we
         // want more granular control over text formatting
@@ -149,11 +158,7 @@ public class About.OperatingSystemView : Gtk.Grid {
             valign = Gtk.Align.CENTER,
             vexpand = true
         };
-#if WALLPAPER
         software_grid.attach (logo_overlay, 0, 0, 1, 4);
-#else
-        software_grid.attach (icon, 0, 0, 1, 4);
-#endif
         software_grid.attach (title, 1, 0, 3);
 
         software_grid.attach (kernel_version_label, 1, 2, 3);

diff --git a/data/OperatingSystemView.css b/data/OperatingSystemView.css
index 75058b3a5..12fcc41df 100644
--- a/data/OperatingSystemView.css
+++ b/data/OperatingSystemView.css
@@ -1,13 +1,17 @@
-avatar.image {
+.logo {
+    color: white;
     background-image: linear-gradient(
         to bottom,
         alpha(@accent_color_500, 0.25),
         alpha(@accent_color_700, 0.75)
     );
-}
-
-.logo {
-    color: white;
+    border-radius: 100%;
+    box-shadow:
+        inset 0 -2px 0 0 alpha(@highlight_color, 0.2),
+        inset 0 2px 0 0 alpha(@highlight_color, 0.3),
+        inset 2px 0 0 0 alpha(@highlight_color, 0.07),
+        inset -2px 0 0 0 alpha(@highlight_color, 0.07),
+        inset 0 0 0 1px alpha(black, 0.7);
     -gtk-icon-shadow:
         0 1px 1px alpha(black, 0.3),
         0 2px 3px alpha(@accent_color_900, 0.2);

diff --git a/data/gresource.xml b/data/gresource.xml
index 7e1072343..ddaa79c17 100644
--- a/data/gresource.xml
+++ b/data/gresource.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <gresources>
-  <gresource prefix="/io/elementary/switchboard/system">
+  <gresource prefix="/io/elementary/settings/system">
     <file alias="OperatingSystemView.css" compressed="true">OperatingSystemView.css</file>
   </gresource>
 </gresources>

diff --git a/data/meson.build b/data/meson.build
index 8317272af..3964a4b90 100644
--- a/data/meson.build
+++ b/data/meson.build
@@ -1,6 +1,6 @@
 i18n.merge_file(
-    input: 'io.elementary.switchboard.about.appdata.xml.in',
-    output: 'io.elementary.switchboard.about.appdata.xml',
+    input: 'system.metainfo.xml.in',
+    output: 'io.elementary.settings.system.metainfo.xml.in',
     po_dir: join_paths(meson.source_root (), 'po', 'extra'),
     install_dir: join_paths(datadir, 'metainfo'),
     install: true

diff --git a/data/io.elementary.switchboard.about.appdata.xml.in b/data/system.metainfo.xml.in
similarity index 91%
rename from data/io.elementary.switchboard.about.appdata.xml.in
rename to data/system.metainfo.xml.in
index 96c28c400..3a232c5d4 100644
--- a/data/io.elementary.switchboard.about.appdata.xml.in
+++ b/data/system.metainfo.xml.in
@@ -1,11 +1,11 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <component type="addon">
-  <id>io.elementary.switchboard.about</id>
-  <extends>io.elementary.switchboard</extends>
+  <id>io.elementary.settings.system</id>
+  <extends>io.elementary.settings</extends>
   <name>System</name>
   <summary>View operating system and hardware information</summary>
   <icon type="stock">application-x-firmware</icon>
-  <translation type="gettext">about-plug</translation>
+  <translation type="gettext">io.elementary.settings.system</translation>
 
   <releases>
     <release version="6.2.0" date="2023-01-26" urgency="medium">
@@ -91,13 +91,13 @@
   </releases>
   <screenshots>
     <screenshot type="default">
-      <image>https://raw.githubusercontent.com/elementary/switchboard-plug-about/master/data/screenshot.png</image>
+      <image>https://raw.githubusercontent.com/elementary/switchboard-plug-about/main/data/screenshot.png</image>
     </screenshot>
     <screenshot>
-      <image>https://raw.githubusercontent.com/elementary/switchboard-plug-about/master/data/screenshot-hardware.png</image>
+      <image>https://raw.githubusercontent.com/elementary/switchboard-plug-about/main/data/screenshot-hardware.png</image>
     </screenshot>
     <screenshot>
-      <image>https://raw.githubusercontent.com/elementary/switchboard-plug-about/master/data/screenshot-firmware.png</image>
+      <image>https://raw.githubusercontent.com/elementary/switchboard-plug-about/main/data/screenshot-firmware.png</image>
     </screenshot>
   </screenshots>
   <url type="homepage">https://elementary.io</url>

diff --git a/meson.build b/meson.build
index 35823ae99..ba8703c3d 100644
--- a/meson.build
+++ b/meson.build
@@ -1,10 +1,10 @@
 project(
-    'about',
+    'system',
     'vala', 'c',
     version: '6.2.0'
 )
 
-gettext_name = meson.project_name() + '-plug'
+gettext_name = 'io.elementary.settings.' + meson.project_name()
 gnome = import('gnome')
 i18n = import('i18n')

diff --git a/po/about-plug.pot b/po/io.elementary.settings.system.pot
similarity index 100%
rename from po/about-plug.pot
rename to po/io.elementary.settings.system.pot
diff --git a/src/Plug.vala b/src/Plug.vala
index ea36d54ac..4fd5bdb24 100644
--- a/src/Plug.vala
+++ b/src/Plug.vala
@@ -38,7 +38,7 @@ public class About.Plug : Switchboard.Plug {
 
         Object (
             category: Category.SYSTEM,
-            code_name: "io.elementary.switchboard.about",
+            code_name: "io.elementary.settings.system",
             display_name: _("System"),
             description: _("View operating system and hardware information"),
             icon: "application-x-firmware",
@@ -65,17 +65,22 @@ public class About.Plug : Switchboard.Plug {
 
             var stack_switcher = new Gtk.StackSwitcher () {
                 halign = Gtk.Align.CENTER,
-                homogeneous = true,
                 margin_top = 24,
                 stack = stack
             };
 
+            var size_group = new Gtk.SizeGroup (HORIZONTAL);
+            var child = stack_switcher.get_first_child ();
+            while (child != null) {
+                size_group.add_widget (child);
+                child = child.get_next_sibling ();
+            }
+
             main_grid = new Gtk.Grid () {
                 row_spacing = 12
             };
             main_grid.attach (stack_switcher, 0, 0);
             main_grid.attach (stack, 0, 1);
-            main_grid.show_all ();
         }
 
         return main_grid;

diff --git a/src/Views/FirmwareReleaseView.vala b/src/Views/FirmwareReleaseView.vala
index 8f42cb1d8..c39d51e64 100644
--- a/src/Views/FirmwareReleaseView.vala
+++ b/src/Views/FirmwareReleaseView.vala
@@ -10,7 +10,7 @@ public class About.FirmwareReleaseView : Gtk.Box {
 
     private Fwupd.Device device;
     private Fwupd.Release? release;
-    private Granite.Widgets.AlertView placeholder;
+    private Granite.Placeholder placeholder;
     private Gtk.ScrolledWindow scrolled_window;
     private Gtk.Stack stack;
     private Gtk.Revealer update_button_revealer;
@@ -22,7 +22,7 @@ public class About.FirmwareReleaseView : Gtk.Box {
     private Gtk.Label vendor_value_label;
     private Gtk.Label size_value_label;
     private Gtk.Label install_duration_value_label;
-    private Hdy.Deck? deck;
+    private Adw.Leaflet? deck;
 
     construct {
         var back_button = new Gtk.Button.with_label (_("All Updates")) {
@@ -32,7 +32,7 @@ public class About.FirmwareReleaseView : Gtk.Box {
             margin_bottom = 6,
             margin_start = 6,
         };
-        back_button.get_style_context ().add_class (Granite.STYLE_CLASS_BACK_BUTTON);
+        back_button.add_css_class (Granite.STYLE_CLASS_BACK_BUTTON);
 
         title_label = new Gtk.Label ("") {
             ellipsize = END,
@@ -47,24 +47,24 @@ public class About.FirmwareReleaseView : Gtk.Box {
             margin_start = 6,
             sensitive = false
         };
-        update_button.get_style_context ().add_class (Gtk.STYLE_CLASS_SUGGESTED_ACTION);
+        update_button.add_css_class (Granite.STYLE_CLASS_SUGGESTED_ACTION);
 
         update_button_revealer = new Gtk.Revealer () {
             child = update_button
         };
 
-        var header_box = new Gtk.Box (HORIZONTAL, 6) {
-            hexpand = true
+        var header_box = new Gtk.CenterBox () {
+            hexpand = true,
+            start_widget = back_button,
+            center_widget = title_label,
+            end_widget = update_button_revealer
         };
-        header_box.pack_start (back_button);
-        header_box.set_center_widget (title_label);
-        header_box.pack_end (update_button_revealer);
 
         summary_label = new Gtk.Label ("") {
             halign = START,
             wrap = true
         };
-        summary_label.get_style_context ().add_class (Granite.STYLE_CLASS_H2_LABEL);
+        summary_label.add_css_class (Granite.STYLE_CLASS_H2_LABEL);
 
         description_label = new Gtk.Label ("") {
             halign = START,
@@ -114,7 +114,7 @@ public class About.FirmwareReleaseView : Gtk.Box {
             margin_top = 12,
             row_spacing = 3
         };
-        key_val_grid.get_style_context ().add_class (Gtk.STYLE_CLASS_DIM_LABEL);
+        key_val_grid.add_css_class (Granite.STYLE_CLASS_DIM_LABEL);
 
         key_val_grid.attach (version_label, 0, 0);
         key_val_grid.attach (version_value_label, 1, 0);
@@ -125,12 +125,9 @@ public class About.FirmwareReleaseView : Gtk.Box {
         key_val_grid.attach (install_duration_label, 0, 3);
         key_val_grid.attach (install_duration_value_label, 1, 3);
 
-        placeholder = new Granite.Widgets.AlertView (
-            "",
-            _("There are no releases available for this device."),
-            ""
-        );
-        placeholder.get_style_context ().remove_class (Gtk.STYLE_CLASS_VIEW);
+        placeholder = new Granite.Placeholder ("") {
+            description = _("There are no releases available for this device.")
+        };
 
         var box = new Gtk.Box (VERTICAL, 12) {
             halign = CENTER,
@@ -140,26 +137,25 @@ public class About.FirmwareReleaseView : Gtk.Box {
             margin_start = 12,
             vexpand = true
         };
-        box.add (summary_label);
-        box.add (description_label);
-        box.add (key_val_grid);
+        box.append (summary_label);
+        box.append (description_label);
+        box.append (key_val_grid);
 
-        scrolled_window = new Gtk.ScrolledWindow (null, null) {
+        scrolled_window = new Gtk.ScrolledWindow () {
             child = box,
             hscrollbar_policy = NEVER,
             vexpand = true
         };
 
         stack = new Gtk.Stack ();
-        stack.add (placeholder);
-        stack.add (scrolled_window);
+        stack.add_child (placeholder);
+        stack.add_child (scrolled_window);
 
         orientation = VERTICAL;
-        get_style_context ().add_class (Gtk.STYLE_CLASS_VIEW);
-        add (header_box);
-        add (new Gtk.Separator (HORIZONTAL));
-        add (stack);
-        show_all ();
+        add_css_class (Granite.STYLE_CLASS_VIEW);
+        append (header_box);
+        append (new Gtk.Separator (HORIZONTAL));
+        append (stack);
 
         back_button.clicked.connect (() => {
             go_back ();
@@ -185,9 +181,9 @@ public class About.FirmwareReleaseView : Gtk.Box {
 
             var icons = device.get_icons ();
             if (icons.data != null) {
-                placeholder.icon_name = icons.data[0];
+                placeholder.icon = new ThemedIcon (icons.data[0]);
             } else {
-                placeholder.icon_name = "application-x-firmware";
+                placeholder.icon = new ThemedIcon ("application-x-firmware");
             }
 
             stack.visible_child = placeholder;
@@ -227,13 +223,11 @@ public class About.FirmwareReleaseView : Gtk.Box {
         } else {
             install_duration_value_label.label = GLib.ngettext ("%llu minute", "%llu minutes", duration_minutes).printf (duration_minutes);
         }
-
-        show_all ();
     }
 
     private void go_back () {
         if (deck == null) {
-            deck = (Hdy.Deck) get_ancestor (typeof (Hdy.Deck));
+            deck = (Adw.Leaflet) get_ancestor (typeof (Adw.Leaflet));
         }
 
         deck.navigate (BACK);

diff --git a/src/Views/FirmwareView.vala b/src/Views/FirmwareView.vala
index 4e4c65aff..117596a66 100644
--- a/src/Views/FirmwareView.vala
+++ b/src/Views/FirmwareView.vala
@@ -21,10 +21,10 @@
 
 public class About.FirmwareView : Granite.SimpleSettingsPage {
     private Gtk.Stack stack;
-    private Hdy.Deck deck;
+    private Adw.Leaflet deck;
     private FirmwareReleaseView firmware_release_view;
-    private Granite.Widgets.AlertView progress_alert_view;
-    private Granite.Widgets.AlertView placeholder_alert_view;
+    private Granite.Placeholder progress_alert_view;
+    private Granite.Placeholder placeholder_alert_view;
     private Gtk.ListBox update_list;
     private uint num_updates = 0;
     private Fwupd.Client fwupd_client;
@@ -38,20 +38,15 @@ public class About.FirmwareView : Granite.SimpleSettingsPage {
     }
 
     construct {
-        progress_alert_view = new Granite.Widgets.AlertView (
-            "",
-            _("Do not unplug the device during the update."),
-            "emblem-synchronized"
-        );
-        progress_alert_view.get_style_context ().remove_class (Gtk.STYLE_CLASS_VIEW);
+        progress_alert_view = new Granite.Placeholder ("") {
+            description = _("Do not unplug the device during the update."),
+            icon = new ThemedIcon ("emblem-synchronized")
+        };
 
-        placeholder_alert_view = new Granite.Widgets.AlertView (
-            _("Checking for Updates"),
-            _("Connecting to the firmware service and searching for updates."),
-            "sync-synchronizing"
-        );
-        placeholder_alert_view.show_all ();
-        placeholder_alert_view.get_style_context ().remove_class (Gtk.STYLE_CLASS_VIEW);
+        placeholder_alert_view = new Granite.Placeholder (_("Checking for Updates")) {
+            description = _("Connecting to the firmware service and searching for updates."),
+            icon = new ThemedIcon ("sync-synchronizing")
+        };
 
         update_list = new Gtk.ListBox () {
             vexpand = true,
@@ -61,33 +56,36 @@ public class About.FirmwareView : Granite.SimpleSettingsPage {
         update_list.set_header_func ((Gtk.ListBoxUpdateHeaderFunc) header_rows);
         update_list.set_placeholder (placeholder_alert_view);
 
-        var update_scrolled = new Gtk.ScrolledWindow (null, null);
-        update_scrolled.add (update_list);
+        var update_scrolled = new Gtk.ScrolledWindow () {
+            child = update_list
+        };
 
         firmware_release_view = new FirmwareReleaseView ();
 
-        deck = new Hdy.Deck () {
-            can_swipe_back = true
+        deck = new Adw.Leaflet () {
+            can_navigate_back = true,
+            can_unfold = false
         };
-        deck.add (update_scrolled);
-        deck.add (firmware_release_view);
+        deck.append (update_scrolled);
+        deck.append (firmware_release_view);
         deck.visible_child = update_scrolled;
 
         stack = new Gtk.Stack () {
             transition_type = Gtk.StackTransitionType.SLIDE_LEFT_RIGHT
         };
-        stack.add (deck);
-        stack.add (progress_alert_view);
+        stack.add_child (deck);
+        stack.add_child (progress_alert_view);
 
-        var frame = new Gtk.Frame (null);
-        frame.add (stack);
+        var frame = new Gtk.Frame (null) {
+            child = stack
+        };
 
-        content_area.add (frame);
+        content_area.attach (frame, 0, 0);
 
         if (LoginManager.get_instance ().can_reboot_to_firmware_setup ()) {
             var reboot_to_firmware_setup_button = new Gtk.Button.with_label (_("Restart to Firmware Setup…"));
             reboot_to_firmware_setup_button.clicked.connect (reboot_to_firmware_setup_clicked);
-            action_area.add (reboot_to_firmware_setup_button);
+            action_area.append (reboot_to_firmware_setup_button);
         }
 
         fwupd_client = new Fwupd.Client ();
@@ -104,10 +102,8 @@ public class About.FirmwareView : Granite.SimpleSettingsPage {
     }
 
     private async void update_list_view () {
-        foreach (unowned Gtk.Widget widget in update_list.get_children ()) {
-            if (widget is Widgets.FirmwareUpdateRow) {
-                update_list.remove (widget);
-            }
+        while (update_list.get_row_at_index (0) != null) {
+            update_list.remove (update_list.get_row_at_index (0));
         }
 
         num_updates = 0;
@@ -120,7 +116,6 @@ public class About.FirmwareView : Granite.SimpleSettingsPage {
 
             placeholder_alert_view.title = _("Firmware Updates Are Not Available");
             placeholder_alert_view.description = _("Firmware updates are not supported on this or any connected devices.");
-            update_list.show_all ();
         } catch (Error e) {
             placeholder_alert_view.title = _("The Firmware Service Is Not Available");
             placeholder_alert_view.description = _("Please make sure “fwupd” is installed and enabled.");
@@ -149,9 +144,8 @@ public class About.FirmwareView : Granite.SimpleSettingsPage {
                     num_updates++;
                 }
 
-                update_list.add (row);
+                update_list.append (row);
                 update_list.invalidate_sort ();
-                update_list.show_all ();
 
                 row.update.connect ((device, release) => {
                     update.begin (device, release);
@@ -174,27 +168,32 @@ public class About.FirmwareView : Granite.SimpleSettingsPage {
         add_device (device);
 
         stack.visible_child = deck;
-        update_list.show_all ();
     }
 
     private void on_device_removed (Fwupd.Client client, Fwupd.Device device) {
         debug ("Removed device: %s", device.get_name ());
 
-        foreach (unowned Gtk.Widget widget in update_list.get_children ()) {
-            if (widget is Widgets.FirmwareUpdateRow) {
-                var row = (Widgets.FirmwareUpdateRow) widget;
+        unowned var child = update_list.get_first_child ();
+        while (child != null) {
+            Widgets.FirmwareUpdateRow row = null;
+            if (child is Widgets.FirmwareUpdateRow) {
+                row = (Widgets.FirmwareUpdateRow) child;
+            }
+
+            child = child.get_next_sibling ();
+
+            if (row != null) {
                 if (row.device.get_id () == device.get_id ()) {
                     if (row.is_updatable) {
                         num_updates--;
                     }
 
-                    update_list.remove (widget);
-                    update_list.invalidate_sort ();
+                    update_list.remove (row);
                 }
             }
         }
 
-        update_list.show_all ();
+        update_list.invalidate_sort ();
     }
 
     [CCode (instance_pos = -1)]
@@ -213,30 +212,18 @@ public class About.FirmwareView : Granite.SimpleSettingsPage {
     [CCode (instance_pos = -1)]
     private void header_rows (Widgets.FirmwareUpdateRow row1, Widgets.FirmwareUpdateRow? row2) {
         if (row2 == null && row1.is_updatable) {
-            var header = new FirmwareHeaderRow (
+            var header = new Granite.HeaderLabel (
                 dngettext (GETTEXT_PACKAGE, "%u Update Available", "%u Updates Available", num_updates).printf (num_updates)
             );
             row1.set_header (header);
         } else if (row2 == null || row1.is_updatable != row2.is_updatable) {
-            var header = new FirmwareHeaderRow (_("Up to Date"));
+            var header = new Granite.HeaderLabel (_("Up to Date"));
             row1.set_header (header);
         } else {
             row1.set_header (null);
         }
     }
 
-    private class FirmwareHeaderRow : Gtk.Label {
-        public FirmwareHeaderRow (string label) {
-            Object (label: label);
-        }
-
-        construct {
-            xalign = 0;
-            margin = 3;
-            get_style_context ().add_class (Granite.STYLE_CLASS_H4_LABEL);
-        }
-    }
-
     private async void update (Fwupd.Device device, Fwupd.Release release) {
         progress_alert_view.title = _("“%s” is being updated").printf (device.get_name ());
         stack.visible_child = progress_alert_view;
@@ -327,7 +314,7 @@ public class About.FirmwareView : Granite.SimpleSettingsPage {
             Gtk.ButtonsType.CLOSE
         ) {
             badge_icon = new ThemedIcon ("dialog-error"),
-            transient_for = (Gtk.Window) get_toplevel ()
+            transient_for = (Gtk.Window) get_root ()
         };
 
         message_dialog.response.connect (message_dialog.destroy);
@@ -348,15 +335,15 @@ public class About.FirmwareView : Granite.SimpleSettingsPage {
             Gtk.ButtonsType.CANCEL
         ) {
             badge_icon = new ThemedIcon ("dialog-information"),
-            transient_for = (Gtk.Window) get_toplevel ()
+            transient_for = (Gtk.Window) get_root ()
         };
 
         var suggested_button = (Gtk.Button) message_dialog.add_button (_("Continue"), Gtk.ResponseType.ACCEPT);
-        suggested_button.get_style_context ().add_class (Gtk.STYLE_CLASS_SUGGESTED_ACTION);
+        suggested_button.add_css_class (Granite.STYLE_CLASS_SUGGESTED_ACTION);
 
         if (detach_image != null) {
             var custom_widget = new Gtk.Image.from_file (detach_image);
-            message_dialog.custom_bin.add (custom_widget);
+            message_dialog.custom_bin.append (custom_widget);
         }
 
         return message_dialog;
@@ -370,11 +357,11 @@ public class About.FirmwareView : Granite.SimpleSettingsPage {
             Gtk.ButtonsType.CANCEL
         ) {
             badge_icon = new ThemedIcon ("system-reboot"),
-            transient_for = (Gtk.Window) get_toplevel ()
+            transient_for = (Gtk.Window) get_root ()
         };
 
         var suggested_button = (Gtk.Button) message_dialog.add_button (_("Restart"), Gtk.ResponseType.ACCEPT);
-        suggested_button.get_style_context ().add_class (Gtk.STYLE_CLASS_SUGGESTED_ACTION);
+        suggested_button.add_css_class (Granite.STYLE_CLASS_SUGGESTED_ACTION);
 
         message_dialog.response.connect ((response) => {
             if (response == Gtk.ResponseType.ACCEPT) {
@@ -394,11 +381,11 @@ public class About.FirmwareView : Granite.SimpleSettingsPage {
             Gtk.ButtonsType.CANCEL
         ) {
             badge_icon = new ThemedIcon ("system-shutdown"),
-            transient_for = (Gtk.Window) get_toplevel ()
+            transient_for = (Gtk.Window) get_root ()
         };
 
         var suggested_button = (Gtk.Button) message_dialog.add_button (_("Shut Down"), Gtk.ResponseType.ACCEPT);
-        suggested_button.get_style_context ().add_class (Gtk.STYLE_CLASS_DESTRUCTIVE_ACTION);
+        suggested_button.add_css_class (Granite.STYLE_CLASS_DESTRUCTIVE_ACTION);
 
         message_dialog.response.connect ((response) => {
             if (response == Gtk.ResponseType.ACCEPT) {
@@ -419,11 +406,11 @@ public class About.FirmwareView : Granite.SimpleSettingsPage {
         ) {
             badge_icon = new ThemedIcon ("application-x-firmware"),
             modal = true,
-            transient_for = (Gtk.Window) get_toplevel ()
+            transient_for = (Gtk.Window) get_root ()
         };
 
         var continue_button = dialog.add_button (_("Restart"), Gtk.ResponseType.ACCEPT);
-        continue_button.get_style_context ().add_class (Gtk.STYLE_CLASS_DESTRUCTIVE_ACTION);
+        continue_button.add_css_class (Granite.STYLE_CLASS_DESTRUCTIVE_ACTION);
 
         dialog.response.connect ((result) => {
             dialog.destroy ();
@@ -444,7 +431,7 @@ public class About.FirmwareView : Granite.SimpleSettingsPage {
                 ) {
                     badge_icon = new ThemedIcon ("dialog-error"),
                     modal = true,
-                    transient_for = (Gtk.Window) get_toplevel ()
+                    transient_for = (Gtk.Window) get_root ()
                 };
                 message_dialog.show_error_details (error.message);
                 message_dialog.present ();

diff --git a/src/Views/HardwareView.vala b/src/Views/HardwareView.vala
index fbb385acb..455fbef1f 100644
--- a/src/Views/HardwareView.vala
+++ b/src/Views/HardwareView.vala
@@ -40,7 +40,7 @@ public class About.HardwareView : Gtk.Box {
             selectable = true,
             xalign = 0
         };
-        product_name_info.get_style_context ().add_class (Granite.STYLE_CLASS_H2_LABEL);
+        product_name_info.add_css_class (Granite.STYLE_CLASS_H2_LABEL);
 
         var processor_info = new Gtk.Label (processor) {
             ellipsize = MIDDLE,
@@ -68,7 +68,7 @@ public class About.HardwareView : Gtk.Box {
         };
 
         graphics_box = new Gtk.Box (VERTICAL, 6);
-        graphics_box.add (primary_graphics_info);
+        graphics_box.append (primary_graphics_info);
 
         storage_info = new Gtk.Label (_("Unknown storage")) {
             ellipsize = MIDDLE,
@@ -99,21 +99,21 @@ public class About.HardwareView : Gtk.Box {
                 selectable = true,
                 xalign = 0
             };
-            manufacturer_info.get_style_context ().add_class (Gtk.STYLE_CLASS_DIM_LABEL);
+            manufacturer_info.add_css_class (Granite.STYLE_CLASS_DIM_LABEL);
 
-            details_box.add (product_name_info);
-            details_box.add (manufacturer_info);
+            details_box.append (product_name_info);
+            details_box.append (manufacturer_info);
         } else {
-            details_box.add (product_name_info);
+            details_box.append (product_name_info);
         }
 
         update_manufacturer_logo ();
 
-        details_box.add (processor_info);
-        details_box.add (graphics_box);
+        details_box.append (processor_info);
+        details_box.append (graphics_box);
 
-        details_box.add (memory_info);
-        details_box.add (storage_info);
+        details_box.append (memory_info);
+        details_box.append (storage_info);
 
         if (oem_enabled && manufacturer_support_url != null) {
             var manufacturer_website_info = new Gtk.LinkButton.with_label (
@@ -121,11 +121,10 @@ public class About.HardwareView : Gtk.Box {
                 _("Manufacturer Website")
             ) {
                 halign = START,
-                margin_top = 12,
-                xalign = 0
+                margin_top = 12
             };
 
-            details_box.add (manufacturer_website_info);
+            details_box.append (manufacturer_website_info);
         }
 
         margin_start = 16;
@@ -133,8 +132,8 @@ public class About.HardwareView : Gtk.Box {
         spacing = 32;
         halign = CENTER;
 
-        add (manufacturer_logo);
-        add (details_box);
+        append (manufacturer_logo);
+        append (details_box);
 
         granite_settings.notify["prefers-color-scheme"].connect (() => {
             update_manufacturer_logo ();
@@ -316,8 +315,7 @@ public class About.HardwareView : Gtk.Box {
         var secondary_gpu = yield get_gpu_info (false);
         if (secondary_gpu != null) {
             secondary_graphics_info.label = secondary_gpu;
-            graphics_box.add (secondary_graphics_info);
-            graphics_box.show_all ();
+            graphics_box.append (secondary_graphics_info);
         }
     }

diff --git a/src/Views/OperatingSystemView.vala b/src/Views/OperatingSystemView.vala
index 3718f7c02..a5767f0cd 100644
--- a/src/Views/OperatingSystemView.vala
+++ b/src/Views/OperatingSystemView.vala
@@ -18,14 +18,14 @@
 * Boston, MA 02110-1301 USA
 */
 
-public class About.OperatingSystemView : Gtk.Grid {
+public class About.OperatingSystemView : Gtk.Box {
     private string support_url;
 
     private Gtk.Grid software_grid;
 
     construct {
         var style_provider = new Gtk.CssProvider ();
-        style_provider.load_from_resource ("io/elementary/switchboard/system/OperatingSystemView.css");
+        style_provider.load_from_resource ("io/elementary/settings/system/OperatingSystemView.css");
 
         var uts_name = Posix.utsname ();
 
@@ -45,31 +45,25 @@ public class About.OperatingSystemView : Gtk.Grid {
 
         var logo_overlay = new Gtk.Overlay ();
 
-        if (Gtk.IconTheme.get_default ().has_icon (logo_icon_name + "-symbolic")) {
+        if (Gtk.IconTheme.get_for_display (Gdk.Display.get_default ()).has_icon (logo_icon_name + "-symbolic")) {
             foreach (unowned var path in Environment.get_system_data_dirs ()) {
                 var file = File.new_for_path (
                     Path.build_path (Path.DIR_SEPARATOR_S, path, "backgrounds", "elementaryos-default")
                 );
 
                 if (file.query_exists ()) {
-                    var file_icon = new FileIcon (file);
-
-                    var logo = new Hdy.Avatar (128, "", false) {
-                        loadable_icon = file_icon,
-                        // We need this for the shadow to not get clipped by Gtk.Overlay
-                        margin = 6
+                    var logo = new Adw.Avatar (128, "", false) {
+                        custom_image = Gdk.Texture.from_file (file)
                     };
                     logo.get_style_context ().add_provider (style_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
 
-                    logo_overlay.add (logo);
+                    logo_overlay.child = logo;
                     logo_overlay.add_overlay (icon);
 
                     // 128 minus 3px padding on each side
                     icon.pixel_size = 128 - 6;
-
-                    unowned var icon_style_context = icon.get_style_context ();
-                    icon_style_context.add_class ("logo");
-                    icon_style_context.add_provider (style_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
+                    icon.add_css_class ("logo");
+                    icon.get_style_context ().add_provider (style_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
 
                     break;
                 }
@@ -78,7 +72,7 @@ public class About.OperatingSystemView : Gtk.Grid {
 
         if (icon.parent == null) {
             icon.pixel_size = 128;
-            logo_overlay.add (icon);
+            logo_overlay.child = icon;
         }
 
         // Intentionally not using GLib.OsInfoKey.PRETTY_NAME here because we
@@ -138,21 +132,22 @@ public class About.OperatingSystemView : Gtk.Grid {
 
         var settings_restore_button = new Gtk.Button.with_label (_("Restore Default Settings"));
 
-        var button_grid = new Gtk.ButtonBox (Gtk.Orientation.HORIZONTAL) {
+        var primary_button_box = new Gtk.Box (HORIZONTAL, 6) {
             hexpand = true,
-            layout_style = Gtk.ButtonBoxStyle.END,
-            spacing = 6
+            halign = END,
+            homogeneous = true
         };
-        button_grid.add (settings_restore_button);
-        button_grid.add (bug_button);
+        primary_button_box.append (bug_button);
         if (update_button != null) {
-            button_grid.add (update_button);
+            primary_button_box.append (update_button);
         }
-        button_grid.set_child_secondary (settings_restore_button, true);
+
+        var button_grid = new Gtk.Box (HORIZONTAL, 6);
+        button_grid.append (settings_restore_button);
+        button_grid.append (primary_button_box);
 
         software_grid = new Gtk.Grid () {
-            // The avatar has some built-in margin for shadows
-            column_spacing = 32 - 6,
+            column_spacing = 32,
             halign = Gtk.Align.CENTER,
             row_spacing = 6,
             valign = Gtk.Align.CENTER,
@@ -166,12 +161,14 @@ public class About.OperatingSystemView : Gtk.Grid {
         software_grid.attach (help_button, 2, 3);
         software_grid.attach (translate_button, 3, 3);
 
-        margin = 12;
+        margin_top = 12;
+        margin_end = 12;
+        margin_bottom = 12;
+        margin_start = 12;
         orientation = Gtk.Orientation.VERTICAL;
-        row_spacing = 12;
-        add (software_grid);
-        add (button_grid);
-        show_all ();
+        spacing = 12;
+        append (software_grid);
+        append (button_grid);
 
         settings_restore_button.clicked.connect (settings_restore_clicked);
 
@@ -226,7 +223,6 @@ public class About.OperatingSystemView : Gtk.Grid {
                 xalign = 0
             };
             software_grid.attach (based_off, 1, 1, 3);
-            software_grid.show_all ();
         }
     }
 
@@ -245,10 +241,10 @@ public class About.OperatingSystemView : Gtk.Grid {
             "dialog-warning",
             Gtk.ButtonsType.CANCEL
         );
-        dialog.transient_for = (Gtk.Window) get_toplevel ();
+        dialog.transient_for = (Gtk.Window) get_root ();
 
         var continue_button = dialog.add_button (_("Restore Settings"), Gtk.ResponseType.ACCEPT);
-        continue_button.get_style_context ().add_class (Gtk.STYLE_CLASS_DESTRUCTIVE_ACTION);
+        continue_button.get_style_context ().add_class (Granite.STYLE_CLASS_DESTRUCTIVE_ACTION);
 
         dialog.response.connect ((response) => {
             dialog.destroy ();

diff --git a/src/Widgets/FirmwareUpdateRow.vala b/src/Widgets/FirmwareUpdateRow.vala
index a5c43a5a1..91f4de63a 100644
--- a/src/Widgets/FirmwareUpdateRow.vala
+++ b/src/Widgets/FirmwareUpdateRow.vala
@@ -34,7 +34,7 @@ public class About.Widgets.FirmwareUpdateRow : Gtk.ListBoxRow {
     }
 
     construct {
-        var image = new Gtk.Image.from_icon_name ("application-x-firmware", Gtk.IconSize.DND) {
+        var image = new Gtk.Image.from_icon_name ("application-x-firmware") {
             pixel_size = 32
         };
 
@@ -51,7 +51,10 @@ public class About.Widgets.FirmwareUpdateRow : Gtk.ListBoxRow {
 
         var grid = new Gtk.Grid () {
             column_spacing = 12,
-            margin = 6
+            margin_top = 6,
+            margin_end = 6,
+            margin_bottom = 6,
+            margin_start = 6
         };
         grid.attach (image, 0, 0, 1, 2);
         grid.attach (device_name_label, 1, 0);
@@ -78,6 +81,6 @@ public class About.Widgets.FirmwareUpdateRow : Gtk.ListBoxRow {
             grid.attach (update_button, 2, 0, 1, 2);
         }
 
-        add (grid);
+        child = grid;
     }
 }

From 0e891415ede262e6645dcc60fcf0a5774ea288de Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Danielle=20For=C3=A9?= <danielle@elementary.io>
Date: Mon, 22 Jan 2024 21:00:18 -0800
Subject: [PATCH 078/240] OperatingSystemView: expand restore defaults
 coverage, change icons (#285)

---
 src/Views/OperatingSystemView.vala | 19 ++++++++++++-------
 1 file changed, 12 insertions(+), 7 deletions(-)

diff --git a/src/Views/OperatingSystemView.vala b/src/Views/OperatingSystemView.vala
index a5767f0cd..3546813e0 100644
--- a/src/Views/OperatingSystemView.vala
+++ b/src/Views/OperatingSystemView.vala
@@ -235,13 +235,15 @@ public class About.OperatingSystemView : Gtk.Box {
     }
 
     private void settings_restore_clicked () {
-        var dialog = new Granite.MessageDialog.with_image_from_icon_name (
+        var dialog = new Granite.MessageDialog (
             _("System Settings Will Be Restored to The Factory Defaults"),
             _("All system settings and data will be reset to the default values. Personal data, such as music and pictures, will be unaffected."),
-            "dialog-warning",
+            new ThemedIcon ("preferences-system"),
             Gtk.ButtonsType.CANCEL
-        );
-        dialog.transient_for = (Gtk.Window) get_root ();
+        ) {
+            badge_icon = new ThemedIcon ("edit-clear"),
+            transient_for = (Gtk.Window) this.get_root ()
+        };
 
         var continue_button = dialog.add_button (_("Restore Settings"), Gtk.ResponseType.ACCEPT);
         continue_button.get_style_context ().add_class (Granite.STYLE_CLASS_DESTRUCTIVE_ACTION);
@@ -274,12 +276,15 @@ public class About.OperatingSystemView : Gtk.Box {
         string[] schemas = {};
         string[] pantheon_schemas = {};
         string[] prefixes = {
-            "org.pantheon.desktop",
             "io.elementary.desktop",
+            "io.elementary.dock",
             "io.elementary.onboarding",
-            "io.elementary.wingpanel.keyboard",
+            "io.elementary.settings",
+            "io.elementary.settings-daemon",
+            "io.elementary.wingpanel",
             "org.gnome.desktop",
-            "org.gnome.settings-daemon"
+            "org.gnome.settings-daemon",
+            "org.pantheon.desktop"
         };
 
         var sss = SettingsSchemaSource.get_default ();

From 2d1d9e504b6affc6c275cbff097b5d129be56576 Mon Sep 17 00:00:00 2001
From: Leonhard <106322251+leolost2605@users.noreply.github.com>
Date: Wed, 24 Jan 2024 22:46:01 +0100
Subject: [PATCH 079/240] Add system updates (#280)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Co-authored-by: Danielle Foré <danielle@elementary.io>
---
 po/POTFILES                          |   1 +
 src/DBus/SystemUpdate.vala           |  29 +++
 src/Views/OperatingSystemView.vala   | 277 +++++++++++++++++++++++----
 src/Widgets/UpdateDetailsDialog.vala |  72 +++++++
 src/meson.build                      |   4 +-
 5 files changed, 349 insertions(+), 34 deletions(-)
 create mode 100644 src/DBus/SystemUpdate.vala
 create mode 100644 src/Widgets/UpdateDetailsDialog.vala

diff --git a/po/POTFILES b/po/POTFILES
index 6a97cd119..c48ca9870 100644
--- a/po/POTFILES
+++ b/po/POTFILES
@@ -4,3 +4,4 @@ src/Views/FirmwareView.vala
 src/Views/HardwareView.vala
 src/Views/OperatingSystemView.vala
 src/Widgets/FirmwareUpdateRow.vala
+src/Widgets/UpdateDetailsDialog.vala

diff --git a/src/DBus/SystemUpdate.vala b/src/DBus/SystemUpdate.vala
new file mode 100644
index 000000000..4929a5c27
--- /dev/null
+++ b/src/DBus/SystemUpdate.vala
@@ -0,0 +1,29 @@
+[DBus (name="io.elementary.settings_daemon.SystemUpdate")]
+public interface SystemUpdate : Object {
+    public enum State {
+        UP_TO_DATE,
+        CHECKING,
+        AVAILABLE,
+        DOWNLOADING,
+        RESTART_REQUIRED,
+        ERROR
+    }
+
+    public struct CurrentState {
+        State state;
+        string message;
+    }
+
+    public struct UpdateDetails {
+        string[] packages;
+        int size;
+    }
+
+    public signal void state_changed ();
+
+    public abstract async CurrentState get_current_state () throws DBusError, IOError;
+    public abstract async UpdateDetails get_update_details () throws DBusError, IOError;
+    public abstract async void cancel () throws DBusError, IOError;
+    public abstract async void check_for_updates (bool force, bool notify) throws DBusError, IOError;
+    public abstract async void update () throws DBusError, IOError;
+}

diff --git a/src/Views/OperatingSystemView.vala b/src/Views/OperatingSystemView.vala
index 3546813e0..a8951c6b3 100644
--- a/src/Views/OperatingSystemView.vala
+++ b/src/Views/OperatingSystemView.vala
@@ -19,9 +19,18 @@
 */
 
 public class About.OperatingSystemView : Gtk.Box {
-    private string support_url;
+    private static Settings update_settings = new Settings ("io.elementary.settings-daemon.system-update");
 
+    private string support_url;
+    private Gtk.StringList packages;
+    private SystemUpdate? update_proxy = null;
+    private SystemUpdate.CurrentState? current_state = null;
     private Gtk.Grid software_grid;
+    private Gtk.Image updates_image;
+    private Gtk.Label updates_title;
+    private Gtk.Label updates_description;
+    private Gtk.Revealer details_button_revealer;
+    private Gtk.Stack button_stack;
 
     construct {
         var style_provider = new Gtk.CssProvider ();
@@ -43,7 +52,9 @@ public class About.OperatingSystemView : Gtk.Box {
             icon_name = logo_icon_name,
         };
 
-        var logo_overlay = new Gtk.Overlay ();
+        var logo_overlay = new Gtk.Overlay () {
+            valign = START
+        };
 
         if (Gtk.IconTheme.get_for_display (Gdk.Display.get_default ()).has_icon (logo_icon_name + "-symbolic")) {
             foreach (unowned var path in Environment.get_system_data_dirs ()) {
@@ -84,7 +95,6 @@ public class About.OperatingSystemView : Gtk.Box {
 
         var title = new Gtk.Label (pretty_name) {
             ellipsize = Pango.EllipsizeMode.END,
-            margin_bottom = 12,
             selectable = true,
             use_markup = true,
             xalign = 0
@@ -95,61 +105,109 @@ public class About.OperatingSystemView : Gtk.Box {
             selectable = true,
             xalign = 0
         };
+        kernel_version_label.add_css_class (Granite.STYLE_CLASS_SMALL_LABEL);
+        kernel_version_label.add_css_class (Granite.STYLE_CLASS_DIM_LABEL);
 
         var website_url = Environment.get_os_info (GLib.OsInfoKey.HOME_URL);
         if (website_url == "" || website_url == null) {
             website_url = "https://elementary.io";
         }
 
-        var website_label = new Gtk.LinkButton.with_label (website_url, _("Website")) {
-            margin_top = 12
-        };
+        var website_label = new Gtk.LinkButton.with_label (website_url, _("Website"));
 
 
         var help_button = new Gtk.LinkButton.with_label (support_url, _("Get Support")) {
             halign = Gtk.Align.CENTER,
-            hexpand = true,
-            margin_top = 12
+            hexpand = true
         };
 
         var translate_button = new Gtk.LinkButton.with_label (
             "https://l10n.elementary.io/projects/",
             _("Suggest Translations")
-        ) {
-            margin_top = 12
-        };
+        );
 
-        var bug_button = new Gtk.Button.with_label (_("Send Feedback"));
+        var bug_button = new Gtk.Button.with_label (_("Send Feedback")) {
+            halign = END,
+            hexpand = true
+        };
 
-        Gtk.Button? update_button = null;
-        var appcenter_info = new GLib.DesktopAppInfo ("io.elementary.appcenter.desktop");
-        if (appcenter_info != null) {
-            update_button = new Gtk.Button.with_label (_("Check for Updates"));
-            update_button.clicked.connect (() => {
-                appcenter_info.launch_action ("ShowUpdates", new GLib.AppLaunchContext ());
-            });
-        }
+        packages = new Gtk.StringList (null);
 
-        var settings_restore_button = new Gtk.Button.with_label (_("Restore Default Settings"));
+        updates_image = new Gtk.Image () {
+            icon_size = LARGE
+        };
 
-        var primary_button_box = new Gtk.Box (HORIZONTAL, 6) {
+        updates_title = new Gtk.Label (null) {
             hexpand = true,
-            halign = END,
-            homogeneous = true
+            margin_end = 6,
+            xalign = 0
         };
-        primary_button_box.append (bug_button);
-        if (update_button != null) {
-            primary_button_box.append (update_button);
-        }
+
+        updates_description = new Gtk.Label (null) {
+            xalign = 0
+        };
+        updates_description.add_css_class (Granite.STYLE_CLASS_SMALL_LABEL);
+        updates_description.add_css_class (Granite.STYLE_CLASS_DIM_LABEL);
+
+        var update_button = new Gtk.Button.with_label (_("Download"));
+        update_button.add_css_class (Granite.STYLE_CLASS_SUGGESTED_ACTION);
+
+        var cancel_button = new Gtk.Button.with_label (_("Cancel"));
+
+        var refresh_button = new Gtk.Button.with_label (_("Refresh"));
+
+        button_stack = new Gtk.Stack () {
+            hhomogeneous = false,
+            transition_type = CROSSFADE,
+            valign = CENTER
+        };
+        button_stack.add_named (new Gtk.Grid (), "blank");
+        button_stack.add_named (update_button, "update");
+        button_stack.add_named (cancel_button, "cancel");
+        button_stack.add_named (refresh_button, "refresh");
+
+        var details_button = new Gtk.Button.with_label (_("Learn More…")) {
+            halign = START,
+            has_frame = false,
+            margin_top = 6
+        };
+        details_button.add_css_class ("link");
+        details_button.add_css_class (Granite.STYLE_CLASS_SMALL_LABEL);
+
+        details_button_revealer = new Gtk.Revealer () {
+            child = details_button
+        };
+
+        var updates_grid = new Gtk.Grid () {
+            column_spacing = 6,
+            margin_top = 6,
+            margin_end = 6,
+            margin_bottom = 6,
+            margin_start = 6
+        };
+        updates_grid.attach (updates_image, 0, 0, 1, 2);
+        updates_grid.attach (updates_title, 1, 0);
+        updates_grid.attach (updates_description, 1, 1);
+        updates_grid.attach (button_stack, 2, 0, 1, 2);
+        updates_grid.attach (details_button_revealer, 1, 2, 2);
+
+        var frame = new Gtk.Frame (null) {
+            child = updates_grid,
+            margin_bottom = 12,
+            margin_top = 12,
+            valign = CENTER
+        };
+        frame.add_css_class (Granite.STYLE_CLASS_VIEW);
+
+        var settings_restore_button = new Gtk.Button.with_label (_("Restore Default Settings"));
 
         var button_grid = new Gtk.Box (HORIZONTAL, 6);
         button_grid.append (settings_restore_button);
-        button_grid.append (primary_button_box);
+        button_grid.append (bug_button);
 
         software_grid = new Gtk.Grid () {
             column_spacing = 32,
             halign = Gtk.Align.CENTER,
-            row_spacing = 6,
             valign = Gtk.Align.CENTER,
             vexpand = true
         };
@@ -157,9 +215,10 @@ public class About.OperatingSystemView : Gtk.Box {
         software_grid.attach (title, 1, 0, 3);
 
         software_grid.attach (kernel_version_label, 1, 2, 3);
-        software_grid.attach (website_label, 1, 3);
-        software_grid.attach (help_button, 2, 3);
-        software_grid.attach (translate_button, 3, 3);
+        software_grid.attach (frame, 1, 3, 3);
+        software_grid.attach (website_label, 1, 4);
+        software_grid.attach (help_button, 2, 4);
+        software_grid.attach (translate_button, 3, 4);
 
         margin_top = 12;
         margin_end = 12;
@@ -187,6 +246,45 @@ public class About.OperatingSystemView : Gtk.Box {
         });
 
         get_upstream_release.begin ();
+
+        Bus.get_proxy.begin<SystemUpdate> (SESSION, "io.elementary.settings-daemon", "/io/elementary/settings_daemon", 0, null, (obj, res) => {
+            try {
+                update_proxy = Bus.get_proxy.end (res);
+
+                update_proxy.state_changed.connect (update_state);
+                update_state.begin ();
+            } catch (Error e) {
+                critical ("Failed to get updates proxy");
+            }
+        });
+
+        update_button.clicked.connect (() => {
+            if (update_proxy != null) {
+                update_proxy.update.begin ((obj, res) => {
+                    try {
+                        update_proxy.update.end (res);
+                    } catch (Error e) {
+                        critical ("Failed to update: %s", e.message);
+                    }
+                });
+            }
+        });
+
+        cancel_button.clicked.connect (() => {
+            if (update_proxy != null) {
+                update_proxy.cancel.begin ((obj, res) => {
+                    try {
+                        update_proxy.cancel.end (res);
+                    } catch (Error e) {
+                        critical ("Failed to cancel update: %s", e.message);
+                    }
+                });
+            }
+        });
+
+        refresh_button.clicked.connect (refresh_clicked);
+
+        details_button.clicked.connect (details_clicked);
     }
 
     private async void get_upstream_release () {
@@ -222,10 +320,123 @@ public class About.OperatingSystemView : Gtk.Box {
                 selectable = true,
                 xalign = 0
             };
+            based_off.add_css_class (Granite.STYLE_CLASS_SMALL_LABEL);
+            based_off.add_css_class (Granite.STYLE_CLASS_DIM_LABEL);
             software_grid.attach (based_off, 1, 1, 3);
         }
     }
 
+    private async void update_state () {
+        if (update_proxy == null) {
+            return;
+        }
+
+        try {
+            current_state = yield update_proxy.get_current_state ();
+        } catch (Error e) {
+            critical ("Failed to get current state from Updates Backend: %s", e.message);
+            return;
+        }
+
+        details_button_revealer.reveal_child = current_state.state == AVAILABLE || current_state.state == ERROR;
+
+        switch (current_state.state) {
+            case UP_TO_DATE:
+                updates_image.icon_name = "process-completed";
+                updates_title.label = _("Up To Date");
+                updates_description.label = _("Last checked %s").printf (
+                    Granite.DateTime.get_relative_datetime (
+                        new DateTime.from_unix_utc (update_settings.get_int64 ("last-refresh-time"))
+                    )
+                );
+                button_stack.visible_child_name = "refresh";
+                break;
+            case CHECKING:
+                updates_image.icon_name = "emblem-synchronized";
+                updates_title.label = _("Checking for Updates");
+                updates_description.label = current_state.message;
+                button_stack.visible_child_name = "blank";
+                break;
+            case AVAILABLE:
+                updates_image.icon_name = "software-update-available";
+                updates_title.label = _("Updates Available");
+                button_stack.visible_child_name = "update";
+
+                try {
+                    var details = yield update_proxy.get_update_details ();
+                    updates_description.label = ngettext (
+                        "%i update available",
+                        "%i updates available",
+                        details.packages.length
+                    ).printf (details.packages.length);
+
+                    packages.splice (0, packages.get_n_items (), details.packages);
+                } catch (Error e) {
+                    updates_description.label = _("Unable to determine number of updates");
+                    warning ("Failed to get updates list from backend: %s", e.message);
+                }
+                break;
+            case DOWNLOADING:
+                updates_image.icon_name = "browser-download";
+                updates_title.label = _("Downloading Updates");
+                updates_description.label = current_state.message;
+                button_stack.visible_child_name = "cancel";
+                break;
+            case RESTART_REQUIRED:
+                updates_image.icon_name = "system-reboot";
+                updates_title.label = _("Restart Required");
+                updates_description.label = _("A restart is required to finish installing updates");
+                button_stack.visible_child_name = "blank";
+                break;
+            case ERROR:
+                updates_image.icon_name = "dialog-error";
+                updates_title.label = _("Failed to download updates");
+                updates_description.label = _("Manually refreshing updates may resolve the issue");
+                button_stack.visible_child_name = "refresh";
+                break;
+        }
+    }
+
+    private void details_clicked () {
+        if (current_state == null) {
+            return;
+        }
+
+        if (current_state.state == ERROR) {
+            var message_dialog = new Granite.MessageDialog (
+                _("Failed to download updates"),
+                _("This may have been caused by sideloaded or manually compiled software, a third-party software source, or a package manager error. Manually refreshing updates may resolve the issue."),
+                new ThemedIcon ("dialog-error")
+            ) {
+                transient_for = (Gtk.Window) get_root (),
+                modal = true
+            };
+
+            message_dialog.show_error_details (current_state.message);
+
+            message_dialog.response.connect (message_dialog.destroy);
+            message_dialog.present ();
+            return;
+        }
+
+        var details_dialog = new UpdateDetailsDialog (packages) {
+            transient_for = (Gtk.Window) get_root ()
+        };
+        details_dialog.present ();
+    }
+
+    private async void refresh_clicked () {
+        if (update_proxy == null) {
+            return;
+        }
+
+        try {
+            yield update_proxy.check_for_updates (true, false);
+        } catch (Error e) {
+            critical ("Failed to check for updates: %s", e.message);
+        }
+    }
+
     private void launch_support_url () {
         try {
             AppInfo.launch_default_for_uri (support_url, null);

diff --git a/src/Widgets/UpdateDetailsDialog.vala b/src/Widgets/UpdateDetailsDialog.vala
new file mode 100644
index 000000000..606185fa5
--- /dev/null
+++ b/src/Widgets/UpdateDetailsDialog.vala
@@ -0,0 +1,72 @@
+/*
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ * SPDX-FileCopyrightText: 2024 elementary, Inc. (https://elementary.io)
+ */
+
+public class About.UpdateDetailsDialog : Granite.Dialog {
+    public Gtk.StringList packages { get; construct; }
+
+    public UpdateDetailsDialog (Gtk.StringList packages ) {
+        Object (packages: packages);
+    }
+
+    construct {
+        title = _("What's New");
+        modal = true;
+
+        var title_label = new Gtk.Label (
+            ngettext (
+                "%u package will be upgraded",
+                "%u packages will be upgraded",
+                packages.get_n_items ()
+            ).printf (packages.get_n_items ())
+        ) {
+            halign = START
+        };
+        title_label.add_css_class (Granite.STYLE_CLASS_TITLE_LABEL);
+
+        var packages_listbox = new Gtk.ListBox () {
+            vexpand = true,
+            selection_mode = NONE
+        };
+        packages_listbox.add_css_class (Granite.STYLE_CLASS_RICH_LIST);
+        packages_listbox.bind_model (packages, (obj) => {
+            var str = ((Gtk.StringObject) obj).string;
+
+            var image = new Gtk.Image.from_icon_name ("package-x-generic") {
+                icon_size = LARGE
+            };
+
+            var label = new Gtk.Label (str);
+
+            var box = new Gtk.Box (HORIZONTAL, 6);
+            box.append (image);
+            box.append (label);
+
+            return box;
+        });
+
+        var scrolled = new Gtk.ScrolledWindow () {
+            child = packages_listbox,
+            hscrollbar_policy = NEVER,
+            max_content_height = 400,
+            propagate_natural_height = true
+        };
+
+        var frame = new Gtk.Frame (null) {
+            child = scrolled
+        };
+
+        var box = new Gtk.Box (VERTICAL, 12);
+        box.append (title_label);
+        box.append (frame);
+
+        get_content_area ().append (box);
+
+        add_button (_("Close"), Gtk.ResponseType.CLOSE);
+
+        response.connect (() => {
+            close ();
+        });
+    }
+}

diff --git a/src/meson.build b/src/meson.build
index 6babf8c90..5c4edf495 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -1,5 +1,6 @@
 plug_files = files(
     'Plug.vala',
+    'DBus' / 'SystemUpdate.vala',
     'Interfaces/FirmwareClient.vala',
     'Interfaces/LoginManager.vala',
     'Utils/ARMPartDecoder.vala',
@@ -7,7 +8,8 @@ plug_files = files(
     'Views/FirmwareView.vala',
     'Views/HardwareView.vala',
     'Views/OperatingSystemView.vala',
-    'Widgets/FirmwareUpdateRow.vala'
+    'Widgets/FirmwareUpdateRow.vala',
+    'Widgets' / 'UpdateDetailsDialog.vala'
 )
 
 switchboard_dep = dependency('switchboard-3')

From f8580de0832b6be0fc08ad07c778536efb0ac670 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Danielle=20For=C3=A9?= <danielle@elementary.io>
Date: Sat, 27 Jan 2024 09:43:36 -0800
Subject: [PATCH 148/240] Clamp views instead of halign (#293)

---
 src/Plug.vala                      |  5 +----
 src/Views/HardwareView.vala        | 21 +++++++++++++++------
 src/Views/OperatingSystemView.vala |  7 +++++--
 3 files changed, 21 insertions(+), 12 deletions(-)

diff --git a/src/Plug.vala b/src/Plug.vala
index 4fd5bdb24..5aabbdee5 100644
--- a/src/Plug.vala
+++ b/src/Plug.vala
@@ -50,10 +50,7 @@ public class About.Plug : Switchboard.Plug {
         if (main_grid == null) {
             var operating_system_view = new OperatingSystemView ();
 
-            var hardware_view = new HardwareView () {
-                valign = Gtk.Align.CENTER
-            };
-
+            var hardware_view = new HardwareView ();
             var firmware_view = new FirmwareView ();
 
             stack = new Gtk.Stack () {

diff --git a/src/Views/HardwareView.vala b/src/Views/HardwareView.vala
index 455fbef1f..bc0c77bc6 100644
--- a/src/Views/HardwareView.vala
+++ b/src/Views/HardwareView.vala
@@ -127,13 +127,22 @@ public class About.HardwareView : Gtk.Box {
             details_box.append (manufacturer_website_info);
         }
 
-        margin_start = 16;
-        margin_end = 16;
-        spacing = 32;
-        halign = CENTER;
+        var box = new Gtk.Box (HORIZONTAL, 32) {
+            valign = CENTER
+        };
+        box.append (manufacturer_logo);
+        box.append (details_box);
+
+        var clamp = new Adw.Clamp () {
+            child = box,
+            hexpand = true
+        };
 
-        append (manufacturer_logo);
-        append (details_box);
+        margin_top = 12;
+        margin_end = 12;
+        margin_bottom = 12;
+        margin_start = 12;
+        append (clamp);
 
         granite_settings.notify["prefers-color-scheme"].connect (() => {
             update_manufacturer_logo ();

diff --git a/src/Views/OperatingSystemView.vala b/src/Views/OperatingSystemView.vala
index a8951c6b3..b94ae18b6 100644
--- a/src/Views/OperatingSystemView.vala
+++ b/src/Views/OperatingSystemView.vala
@@ -207,7 +207,6 @@ public class About.OperatingSystemView : Gtk.Box {
 
         software_grid = new Gtk.Grid () {
             column_spacing = 32,
-            halign = Gtk.Align.CENTER,
             valign = Gtk.Align.CENTER,
             vexpand = true
         };
@@ -220,13 +219,17 @@ public class About.OperatingSystemView : Gtk.Box {
         software_grid.attach (help_button, 2, 4);
         software_grid.attach (translate_button, 3, 4);
 
+        var clamp = new Adw.Clamp () {
+            child = software_grid
+        };
+
         margin_top = 12;
         margin_end = 12;
         margin_bottom = 12;
         margin_start = 12;
         orientation = Gtk.Orientation.VERTICAL;
         spacing = 12;
-        append (software_grid);
+        append (clamp);
         append (button_grid);
 
         settings_restore_button.clicked.connect (settings_restore_clicked);

diff --git a/src/DBus/SystemUpdate.vala b/src/DBus/SystemUpdate.vala
index 4929a5c27..5e9a16ca2 100644
--- a/src/DBus/SystemUpdate.vala
+++ b/src/DBus/SystemUpdate.vala
@@ -17,6 +17,7 @@ public interface SystemUpdate : Object {
     public struct UpdateDetails {
         string[] packages;
         int size;
+        Pk.Info[] info;
     }
 
     public signal void state_changed ();

diff --git a/src/Views/OperatingSystemView.vala b/src/Views/OperatingSystemView.vala
index b94ae18b6..ebfd28eb7 100644
--- a/src/Views/OperatingSystemView.vala
+++ b/src/Views/OperatingSystemView.vala
@@ -373,6 +373,10 @@ public class About.OperatingSystemView : Gtk.Box {
                         details.packages.length
                     ).printf (details.packages.length);
 
+                    if (Pk.Info.SECURITY in details.info) {
+                        updates_image.icon_name = "software-update-urgent";
+                    }
+
                     packages.splice (0, packages.get_n_items (), details.packages);
                 } catch (Error e) {
                     updates_description.label = _("Unable to determine number of updates");

diff --git a/src/meson.build b/src/meson.build
index 5c4edf495..bc8da2851 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -38,6 +38,7 @@ shared_module(
         dependency('gtk4'),
         dependency('libadwaita-1'),
         dependency('libgtop-2.0'),
+        dependency('packagekit-glib2'),
         dependency('gudev-1.0'),
         dependency('udisks2'),
         appstream_dep,

From b07da6e6ecb8c41e66a98cef080e320b7803a02a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Danielle=20For=C3=A9?= <danielle@elementary.io>
Date: Fri, 2 Feb 2024 07:25:20 -0800
Subject: [PATCH 153/240] OperatingSystemView: Add a switch for automatic
 updates (#294)

---
 src/Views/OperatingSystemView.vala | 29 ++++++++++++++++++++++++++++-
 1 file changed, 28 insertions(+), 1 deletion(-)

diff --git a/src/Views/OperatingSystemView.vala b/src/Views/OperatingSystemView.vala
index ebfd28eb7..27a55b8ee 100644
--- a/src/Views/OperatingSystemView.vala
+++ b/src/Views/OperatingSystemView.vala
@@ -178,6 +178,25 @@ public class About.OperatingSystemView : Gtk.Box {
             child = details_button
         };
 
+        var automatic_updates_switch = new Gtk.Switch () {
+            valign = CENTER
+        };
+
+        var automatic_updates_header = new Granite.HeaderLabel (_("Automatic Updates")) {
+            hexpand = true,
+            mnemonic_widget = automatic_updates_switch,
+            secondary_text = _("Updates will be automatically downloaded. They will be installed when this device is restarted.")
+        };
+
+        var automatic_updates_box = new Gtk.Box (HORIZONTAL, 12) {
+            margin_top = 6,
+            margin_end = 6,
+            margin_bottom = 6,
+            margin_start = 6
+        };
+        automatic_updates_box.append (automatic_updates_header);
+        automatic_updates_box.append (automatic_updates_switch);
+
         var updates_grid = new Gtk.Grid () {
             column_spacing = 6,
             margin_top = 6,
@@ -191,8 +210,13 @@ public class About.OperatingSystemView : Gtk.Box {
         updates_grid.attach (button_stack, 2, 0, 1, 2);
         updates_grid.attach (details_button_revealer, 1, 2, 2);
 
+        var updates_box = new Gtk.Box (VERTICAL, 0);
+        updates_box.append (updates_grid);
+        updates_box.append (new Gtk.Separator (HORIZONTAL));
+        updates_box.append (automatic_updates_box);
+
         var frame = new Gtk.Frame (null) {
-            child = updates_grid,
+            child = updates_box,
             margin_bottom = 12,
             margin_top = 12,
             valign = CENTER
@@ -232,6 +256,9 @@ public class About.OperatingSystemView : Gtk.Box {
         append (clamp);
         append (button_grid);
 
+        var system_updates_settings = new Settings ("io.elementary.settings-daemon.system-update");
+        system_updates_settings.bind ("automatic-updates", automatic_updates_switch, "active", DEFAULT);
+
         settings_restore_button.clicked.connect (settings_restore_clicked);
 
         bug_button.clicked.connect (() => {

From c973a734f15869bcaa3989771e054fa29ebd7ec8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Danielle=20For=C3=A9?= <danielle@elementary.io>
Date: Wed, 7 Feb 2024 03:30:00 -0800
Subject: [PATCH 165/240] FirmwareView: use Switchboard.SettingsPage (#297)

Co-authored-by: Jeremy Wootten <jeremywootten@gmail.com>
---
 src/Views/FirmwareView.vala | 9 ++++-----
 1 file changed, 4 insertions(+), 5 deletions(-)

diff --git a/src/Views/FirmwareView.vala b/src/Views/FirmwareView.vala
index 117596a66..7f71fb538 100644
--- a/src/Views/FirmwareView.vala
+++ b/src/Views/FirmwareView.vala
@@ -19,7 +19,7 @@
 * Authored by: Marius Meisenzahl <mariusmeisenzahl@gmail.com>
 */
 
-public class About.FirmwareView : Granite.SimpleSettingsPage {
+public class About.FirmwareView : Switchboard.SettingsPage {
     private Gtk.Stack stack;
     private Adw.Leaflet deck;
     private FirmwareReleaseView firmware_release_view;
@@ -31,7 +31,7 @@ public class About.FirmwareView : Granite.SimpleSettingsPage {
 
     public FirmwareView () {
         Object (
-            icon_name: "application-x-firmware",
+            icon: new ThemedIcon ("application-x-firmware"),
             title: _("Firmware"),
             description: _("Firmware updates provided by device manufacturers can improve performance and fix critical security issues.")
         );
@@ -80,12 +80,11 @@ public class About.FirmwareView : Granite.SimpleSettingsPage {
             child = stack
         };
 
-        content_area.attach (frame, 0, 0);
+        child = frame;
 
         if (LoginManager.get_instance ().can_reboot_to_firmware_setup ()) {
-            var reboot_to_firmware_setup_button = new Gtk.Button.with_label (_("Restart to Firmware Setup…"));
+            var reboot_to_firmware_setup_button = add_button (_("Restart to Firmware Setup…"));
             reboot_to_firmware_setup_button.clicked.connect (reboot_to_firmware_setup_clicked);
-            action_area.append (reboot_to_firmware_setup_button);
         }
 
         fwupd_client = new Fwupd.Client ();

From b457cece2497d840959fd8fcd860dad901fc7738 Mon Sep 17 00:00:00 2001
From: Leonhard <106322251+leolost2605@users.noreply.github.com>
Date: Wed, 21 Feb 2024 22:01:43 +0100
Subject: [PATCH 175/240] OperatingSystemView: load logo asynchronoulsy when
 the plug was shown (#301)

---
 src/Plug.vala                      |  4 +++-
 src/Views/OperatingSystemView.vala | 21 +++++++++++++++++++--
 2 files changed, 22 insertions(+), 3 deletions(-)

diff --git a/src/Plug.vala b/src/Plug.vala
index 5aabbdee5..e96ff6b52 100644
--- a/src/Plug.vala
+++ b/src/Plug.vala
@@ -23,6 +23,7 @@ public class About.Plug : Switchboard.Plug {
     private const string HARDWARE = "hardware";
     private const string FIRMWARE = "firmware";
 
+    private OperatingSystemView operating_system_view;
     private Gtk.Grid main_grid;
     private Gtk.Stack stack;
 
@@ -48,7 +49,7 @@ public class About.Plug : Switchboard.Plug {
 
     public override Gtk.Widget get_widget () {
         if (main_grid == null) {
-            var operating_system_view = new OperatingSystemView ();
+            operating_system_view = new OperatingSystemView ();
 
             var hardware_view = new HardwareView ();
             var firmware_view = new FirmwareView ();
@@ -84,6 +85,7 @@ public class About.Plug : Switchboard.Plug {
     }
 
     public override void shown () {
+        operating_system_view.load_logo.begin ();
     }
 
     public override void hidden () {

diff --git a/src/Views/OperatingSystemView.vala b/src/Views/OperatingSystemView.vala
index 27a55b8ee..2c3e132f2 100644
--- a/src/Views/OperatingSystemView.vala
+++ b/src/Views/OperatingSystemView.vala
@@ -22,6 +22,8 @@ public class About.OperatingSystemView : Gtk.Box {
     private static Settings update_settings = new Settings ("io.elementary.settings-daemon.system-update");
 
     private string support_url;
+    private File? logo_file;
+    private Adw.Avatar? logo;
     private Gtk.StringList packages;
     private SystemUpdate? update_proxy = null;
     private SystemUpdate.CurrentState? current_state = null;
@@ -63,8 +65,9 @@ public class About.OperatingSystemView : Gtk.Box {
                 );
 
                 if (file.query_exists ()) {
-                    var logo = new Adw.Avatar (128, "", false) {
-                        custom_image = Gdk.Texture.from_file (file)
+                    logo_file = file;
+                    logo = new Adw.Avatar (128, "", false) {
+                        custom_image = Gdk.Paintable.empty (128, 128)
                     };
                     logo.get_style_context ().add_provider (style_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
 
@@ -317,6 +320,20 @@ public class About.OperatingSystemView : Gtk.Box {
         details_button.clicked.connect (details_clicked);
     }
 
+    public async void load_logo () {
+        if (logo == null || logo_file == null) {
+            return;
+        }
+
+        try {
+            var bytes = yield logo_file.load_bytes_async (null, null);
+            logo.custom_image = Gdk.Texture.from_bytes (bytes);
+            logo_file = null;
+        } catch (Error e) {
+            warning ("Failed to load logo file: %s", e.message);
+        }
+    }
+
     private async void get_upstream_release () {
         // Upstream distro version (for "Built on" text)
         // FIXME: Add distro specific field to /etc/os-release and use that instead

From 451144e79b894cd53263fa484d877f3f70edd481 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Danielle=20For=C3=A9?= <danielle@elementary.io>
Date: Thu, 21 Mar 2024 09:33:49 -0700
Subject: [PATCH 178/240] Handle own titlebuttons (#314)

---
 src/Plug.vala | 11 ++++++-----
 1 file changed, 6 insertions(+), 5 deletions(-)

diff --git a/src/Plug.vala b/src/Plug.vala
index e96ff6b52..a2c6af845 100644
--- a/src/Plug.vala
+++ b/src/Plug.vala
@@ -62,8 +62,6 @@ public class About.Plug : Switchboard.Plug {
             stack.add_titled (firmware_view, FIRMWARE, _("Firmware"));
 
             var stack_switcher = new Gtk.StackSwitcher () {
-                halign = Gtk.Align.CENTER,
-                margin_top = 24,
                 stack = stack
             };
 
@@ -74,10 +72,13 @@ public class About.Plug : Switchboard.Plug {
                 child = child.get_next_sibling ();
             }
 
-            main_grid = new Gtk.Grid () {
-                row_spacing = 12
+            var headerbar = new Adw.HeaderBar () {
+                title_widget = stack_switcher
             };
-            main_grid.attach (stack_switcher, 0, 0);
+            headerbar.add_css_class (Granite.STYLE_CLASS_FLAT);
+
+            main_grid = new Gtk.Grid ();
+            main_grid.attach (headerbar, 0, 0);
             main_grid.attach (stack, 0, 1);
         }

From 2d21994a5e3561a4dc3f90690292236cc6bf1d04 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Danielle=20For=C3=A9?= <danielle@elementary.io>
Date: Mon, 25 Mar 2024 17:37:16 -0700
Subject: [PATCH 180/240] OperatingSystemView: use boxed-list, modelbutton
 (#315)

---
 src/Views/OperatingSystemView.vala | 43 +++++++++++-------------------
 1 file changed, 15 insertions(+), 28 deletions(-)

diff --git a/src/Views/OperatingSystemView.vala b/src/Views/OperatingSystemView.vala
index 2c3e132f2..e5667059e 100644
--- a/src/Views/OperatingSystemView.vala
+++ b/src/Views/OperatingSystemView.vala
@@ -181,25 +181,10 @@ public class About.OperatingSystemView : Gtk.Box {
             child = details_button
         };
 
-        var automatic_updates_switch = new Gtk.Switch () {
-            valign = CENTER
-        };
-
-        var automatic_updates_header = new Granite.HeaderLabel (_("Automatic Updates")) {
-            hexpand = true,
-            mnemonic_widget = automatic_updates_switch,
-            secondary_text = _("Updates will be automatically downloaded. They will be installed when this device is restarted.")
+        var automatic_updates_button = new Granite.SwitchModelButton (_("Automatic Updates")) {
+            description = _("Updates will be automatically downloaded. They will be installed when this device is restarted.")
         };
 
-        var automatic_updates_box = new Gtk.Box (HORIZONTAL, 12) {
-            margin_top = 6,
-            margin_end = 6,
-            margin_bottom = 6,
-            margin_start = 6
-        };
-        automatic_updates_box.append (automatic_updates_header);
-        automatic_updates_box.append (automatic_updates_switch);
-
         var updates_grid = new Gtk.Grid () {
             column_spacing = 6,
             margin_top = 6,
@@ -213,18 +198,20 @@ public class About.OperatingSystemView : Gtk.Box {
         updates_grid.attach (button_stack, 2, 0, 1, 2);
         updates_grid.attach (details_button_revealer, 1, 2, 2);
 
-        var updates_box = new Gtk.Box (VERTICAL, 0);
-        updates_box.append (updates_grid);
-        updates_box.append (new Gtk.Separator (HORIZONTAL));
-        updates_box.append (automatic_updates_box);
-
-        var frame = new Gtk.Frame (null) {
-            child = updates_box,
+        var updates_list = new Gtk.ListBox () {
             margin_bottom = 12,
             margin_top = 12,
-            valign = CENTER
+            valign = CENTER,
+            show_separators = true,
+            selection_mode = NONE
         };
-        frame.add_css_class (Granite.STYLE_CLASS_VIEW);
+        updates_list.add_css_class ("boxed-list");
+        updates_list.add_css_class (Granite.STYLE_CLASS_RICH_LIST);
+        updates_list.append (updates_grid);
+        updates_list.append (automatic_updates_button);
+
+        updates_list.get_first_child ().focusable = false;
+        updates_list.get_last_child ().focusable = false;
 
         var settings_restore_button = new Gtk.Button.with_label (_("Restore Default Settings"));
 
@@ -241,7 +228,7 @@ public class About.OperatingSystemView : Gtk.Box {
         software_grid.attach (title, 1, 0, 3);
 
         software_grid.attach (kernel_version_label, 1, 2, 3);
-        software_grid.attach (frame, 1, 3, 3);
+        software_grid.attach (updates_list, 1, 3, 3);
         software_grid.attach (website_label, 1, 4);
         software_grid.attach (help_button, 2, 4);
         software_grid.attach (translate_button, 3, 4);
@@ -260,7 +247,7 @@ public class About.OperatingSystemView : Gtk.Box {
         append (button_grid);
 
         var system_updates_settings = new Settings ("io.elementary.settings-daemon.system-update");
-        system_updates_settings.bind ("automatic-updates", automatic_updates_switch, "active", DEFAULT);
+        system_updates_settings.bind ("automatic-updates", automatic_updates_button, "active", DEFAULT);
 
         settings_restore_button.clicked.connect (settings_restore_clicked);

 From d1c4f5481a2c2828660b8fcd1299d3f858e58e74 Mon Sep 17 00:00:00 2001
From: Leonhard <106322251+leolost2605@users.noreply.github.com>
Date: Wed, 3 Apr 2024 18:32:21 +0200
Subject: [PATCH 182/240] Show a placeholder if no connection to the
 settings-daemon could be established (#316)

---
 src/Views/OperatingSystemView.vala | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/src/Views/OperatingSystemView.vala b/src/Views/OperatingSystemView.vala
index e5667059e..f40024cae 100644
--- a/src/Views/OperatingSystemView.vala
+++ b/src/Views/OperatingSystemView.vala
@@ -368,6 +368,11 @@ public class About.OperatingSystemView : Gtk.Box {
         try {
             current_state = yield update_proxy.get_current_state ();
         } catch (Error e) {
+            updates_image.icon_name = "dialog-error";
+            updates_title.label = _("System updates not available");
+            updates_description.label = _("Couldn't connect to the backend. Try logging out to resolve the issue.");
+            button_stack.visible_child_name = "blank";
+
             critical ("Failed to get current state from Updates Backend: %s", e.message);
             return;
         }

From 1abd84718bf909cc744a1348c3b9d64e1b56db57 Mon Sep 17 00:00:00 2001
From: Ryo Nakano <ryonakaknock3@gmail.com>
Date: Sun, 5 May 2024 22:51:22 +0900
Subject: [PATCH 198/240] l10n: Fix some strings not shown as translated (#319)

---
 src/Views/FirmwareReleaseView.vala   | 7 ++++++-
 src/Views/OperatingSystemView.vala   | 3 ++-
 src/Widgets/UpdateDetailsDialog.vala | 3 ++-
 src/meson.build                      | 2 +-
 4 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/src/Views/FirmwareReleaseView.vala b/src/Views/FirmwareReleaseView.vala
index c39d51e64..6efbbec40 100644
--- a/src/Views/FirmwareReleaseView.vala
+++ b/src/Views/FirmwareReleaseView.vala
@@ -221,7 +221,12 @@ public class About.FirmwareReleaseView : Gtk.Box {
         if (duration_minutes < 1) {
             install_duration_value_label.label = _("less than a minute");
         } else {
-            install_duration_value_label.label = GLib.ngettext ("%llu minute", "%llu minutes", duration_minutes).printf (duration_minutes);
+            install_duration_value_label.label = dngettext (
+                GETTEXT_PACKAGE,
+                "%llu minute",
+                "%llu minutes",
+                duration_minutes
+            ).printf (duration_minutes);
         }
     }
 
diff --git a/src/Views/OperatingSystemView.vala b/src/Views/OperatingSystemView.vala
index f40024cae..2f0a557f8 100644
--- a/src/Views/OperatingSystemView.vala
+++ b/src/Views/OperatingSystemView.vala
@@ -403,7 +403,8 @@ public class About.OperatingSystemView : Gtk.Box {
 
                 try {
                     var details = yield update_proxy.get_update_details ();
-                    updates_description.label = ngettext (
+                    updates_description.label = dngettext (
+                        GETTEXT_PACKAGE,
                         "%i update available",
                         "%i updates available",
                         details.packages.length

diff --git a/src/Widgets/UpdateDetailsDialog.vala b/src/Widgets/UpdateDetailsDialog.vala
index 606185fa5..d72abce4d 100644
--- a/src/Widgets/UpdateDetailsDialog.vala
+++ b/src/Widgets/UpdateDetailsDialog.vala
@@ -15,7 +15,8 @@ public class About.UpdateDetailsDialog : Granite.Dialog {
         modal = true;
 
         var title_label = new Gtk.Label (
-            ngettext (
+            dngettext (
+                GETTEXT_PACKAGE,
                 "%u package will be upgraded",
                 "%u packages will be upgraded",
                 packages.get_n_items ()

diff --git a/src/meson.build b/src/meson.build
index bc8da2851..a969378bb 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -16,7 +16,7 @@ switchboard_dep = dependency('switchboard-3')
 switchboard_plugsdir = switchboard_dep.get_pkgconfig_variable('plugsdir', define_variable: ['libdir', libdir])
 
 config_data = configuration_data()
-config_data.set('GETTEXT_PACKAGE', meson.project_name() + '-plug')
+config_data.set('GETTEXT_PACKAGE', gettext_name)
 config_data.set('LOCALEDIR', join_paths(get_option('prefix'), get_option('localedir')))
 config_vala = configure_file(
     input: 'Config.vala.in',

From c0e14a31a3e75037b735e30260df4dcb65737d57 Mon Sep 17 00:00:00 2001
From: Leonhard <106322251+leolost2605@users.noreply.github.com>
Date: Thu, 30 May 2024 17:51:54 +0200
Subject: [PATCH 205/240] Add driver view v2 (with radio buttons) (#309)

---
 src/DBus/Drivers.vala      |  31 ++++++
 src/Plug.vala              |   5 +
 src/Views/DriversView.vala | 195 +++++++++++++++++++++++++++++++++++++
 src/Widgets/DriverRow.vala |  49 ++++++++++
 src/meson.build            |   3 +
 5 files changed, 283 insertions(+)
 create mode 100644 src/DBus/Drivers.vala
 create mode 100644 src/Views/DriversView.vala
 create mode 100644 src/Widgets/DriverRow.vala

diff --git a/src/DBus/Drivers.vala b/src/DBus/Drivers.vala
new file mode 100644
index 000000000..d4ac6d901
--- /dev/null
+++ b/src/DBus/Drivers.vala
@@ -0,0 +1,31 @@
+/*
+ * Copyright 2024 elementary, Inc. (https://elementary.io)
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ *
+ * Authored by: Leonhard Kargl <leo.kargl@proton.me>
+ */
+
+[DBus (name="io.elementary.settings_daemon.Drivers")]
+public interface Drivers : Object {
+    public enum State {
+        UP_TO_DATE,
+        CHECKING,
+        AVAILABLE,
+        DOWNLOADING,
+        RESTART_REQUIRED,
+        ERROR
+    }
+
+    public struct CurrentState {
+        State state;
+        string message;
+    }
+
+    public signal void state_changed ();
+
+    public abstract async CurrentState get_current_state () throws DBusError, IOError;
+    public abstract async HashTable<string, HashTable<string, bool>> get_available_drivers () throws DBusError, IOError;
+    public abstract async void cancel () throws DBusError, IOError;
+    public abstract async void check_for_drivers (bool notify) throws DBusError, IOError;
+    public abstract async void install (string name) throws DBusError, IOError;
+}

diff --git a/src/Plug.vala b/src/Plug.vala
index a2c6af845..cd50001a4 100644
--- a/src/Plug.vala
+++ b/src/Plug.vala
@@ -22,6 +22,7 @@ public class About.Plug : Switchboard.Plug {
     private const string OPERATING_SYSTEM = "operating-system";
     private const string HARDWARE = "hardware";
     private const string FIRMWARE = "firmware";
+    private const string DRIVERS = "drivers";
 
     private OperatingSystemView operating_system_view;
     private Gtk.Grid main_grid;
@@ -36,6 +37,7 @@ public class About.Plug : Switchboard.Plug {
         settings.set ("about/os", OPERATING_SYSTEM);
         settings.set ("about/hardware", HARDWARE);
         settings.set ("about/firmware", FIRMWARE);
+        settings.set ("about/drivers", DRIVERS);
 
         Object (
             category: Category.SYSTEM,
@@ -60,6 +62,7 @@ public class About.Plug : Switchboard.Plug {
             stack.add_titled (operating_system_view, OPERATING_SYSTEM, _("Operating System"));
             stack.add_titled (hardware_view, HARDWARE, _("Hardware"));
             stack.add_titled (firmware_view, FIRMWARE, _("Firmware"));
+            stack.add_titled (new DriversView (), DRIVERS, _("Drivers"));
 
             var stack_switcher = new Gtk.StackSwitcher () {
                 stack = stack
@@ -97,6 +100,7 @@ public class About.Plug : Switchboard.Plug {
             case OPERATING_SYSTEM:
             case HARDWARE:
             case FIRMWARE:
+            case DRIVERS:
                 stack.set_visible_child_name (location);
                 break;
             default:
@@ -121,6 +125,7 @@ public class About.Plug : Switchboard.Plug {
         search_results.set ("%s → %s".printf (display_name, _("Report a Problem")), OPERATING_SYSTEM);
         search_results.set ("%s → %s".printf (display_name, _("Get Support")), OPERATING_SYSTEM);
         search_results.set ("%s → %s".printf (display_name, _("Updates")), OPERATING_SYSTEM);
+        search_results.set ("%s → %s".printf (display_name, _("Drivers")), DRIVERS);
 
         return search_results;
     }

diff --git a/src/Views/DriversView.vala b/src/Views/DriversView.vala
new file mode 100644
index 000000000..60f0c694d
--- /dev/null
+++ b/src/Views/DriversView.vala
@@ -0,0 +1,195 @@
+/*
+ * Copyright 2024 elementary, Inc. (https://elementary.io)
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ *
+ * Authored by: Leonhard Kargl <leo.kargl@proton.me>
+ */
+
+public class About.DriversView : Switchboard.SettingsPage {
+    private Gtk.Stack stack;
+    private Gtk.ListBox devices_list;
+    private Granite.Placeholder progress_placeholder;
+    private Granite.Placeholder error_placeholder;
+    private Drivers? driver_proxy;
+    private string error_message = "";
+
+    public DriversView () {
+        Object (
+            icon: new ThemedIcon ("application-x-firmware"),
+            title: _("Drivers"),
+            description: _("Broadcom® Wi-Fi adapters, NVIDIA® graphics, and some virtual machines may not function properly without additional drivers.")
+        );
+    }
+
+    construct {
+        var none_placeholder = new Granite.Placeholder (_("No drivers available")) {
+            description = _("This device doesn't need any additional drivers."),
+            icon = new ThemedIcon ("emblem-default")
+        };
+
+        var checking_placeholder = new Granite.Placeholder (_("Checking for Drivers")) {
+            description = _("Connecting to the driver service and searching for drivers."),
+            icon = new ThemedIcon ("sync-synchronizing")
+        };
+
+        devices_list = new Gtk.ListBox () {
+            vexpand = true,
+            selection_mode = Gtk.SelectionMode.SINGLE
+        };
+        devices_list.set_placeholder (checking_placeholder);
+        devices_list.set_header_func (header_func);
+        devices_list.add_css_class (Granite.STYLE_CLASS_RICH_LIST);
+
+        var scrolled = new Gtk.ScrolledWindow () {
+            child = devices_list
+        };
+
+        progress_placeholder = new Granite.Placeholder ("") {
+            icon = new ThemedIcon ("emblem-synchronized")
+        };
+
+        error_placeholder = new Granite.Placeholder (_("Failed to install driver")) {
+            description = _("Manually refreshing driver information may resolve the issue"),
+            icon = new ThemedIcon ("dialog-error")
+        };
+        var refresh_button = error_placeholder.append_button (new ThemedIcon ("sync-synchronizing"), _("Refresh"), _("Refresh driver information"));
+        var more_button = error_placeholder.append_button (new ThemedIcon ("go-next"), _("Learn More…"), "");
+
+        stack = new Gtk.Stack () {
+            transition_type = Gtk.StackTransitionType.SLIDE_LEFT_RIGHT
+        };
+        stack.add_named (none_placeholder, "none");
+        stack.add_named (scrolled, "scrolled");
+        stack.add_named (progress_placeholder, "progress");
+        stack.add_named (error_placeholder, "error");
+
+        var frame = new Gtk.Frame (null) {
+            child = stack
+        };
+
+        child = frame;
+
+        Bus.get_proxy.begin<Drivers> (SESSION, "io.elementary.settings-daemon", "/io/elementary/settings_daemon", 0, null, (obj, res) => {
+            try {
+                driver_proxy = Bus.get_proxy.end (res);
+
+                driver_proxy.state_changed.connect (update_state);
+                update_state.begin ();
+            } catch (Error e) {
+                critical ("Failed to get driver proxy: %s", e.message);
+            }
+        });
+
+        refresh_button.clicked.connect (() => {
+            if (driver_proxy != null) {
+                driver_proxy.check_for_drivers.begin (false);
+            }
+        });
+
+        more_button.clicked.connect (() => {
+            var message_dialog = new Granite.MessageDialog (
+                _("Failed to install"),
+                _("This may have been caused by sideloaded or manually compiled software, a third-party software source, or a package manager error. Manually refreshing may resolve the issue."),
+                new ThemedIcon ("dialog-error")
+            ) {
+                transient_for = (Gtk.Window) get_root (),
+                modal = true
+            };
+
+            message_dialog.show_error_details (error_message);
+
+            message_dialog.response.connect (message_dialog.destroy);
+            message_dialog.present ();
+        });
+    }
+
+    private async void update_state () {
+        if (driver_proxy == null) {
+            return;
+        }
+
+        Drivers.CurrentState current_state;
+        try {
+            current_state = yield driver_proxy.get_current_state ();
+        } catch (Error e) {
+            critical ("Failed to get current state from Updates Backend: %s", e.message);
+            return;
+        }
+
+        switch (current_state.state) {
+            case UP_TO_DATE:
+                stack.visible_child_name = "none";
+                break;
+
+            case CHECKING:
+                stack.visible_child_name = "scrolled";
+                //FIXME: Replace with remove_all
+                while (devices_list.get_row_at_index (0) != null) {
+                    devices_list.remove (devices_list.get_row_at_index (0));
+                }
+
+                break;
+
+            case AVAILABLE:
+                stack.visible_child_name = "scrolled";
+                //FIXME: Replace with remove_all
+                while (devices_list.get_row_at_index (0) != null) {
+                    devices_list.remove (devices_list.get_row_at_index (0));
+                }
+
+                try {
+                    var drivers = yield driver_proxy.get_available_drivers ();
+                    foreach (var device in drivers.get_keys ()) {
+                        DriverRow? last_row = null;
+                        foreach (var driver in drivers[device].get_keys ()) {
+                            var row = new DriverRow (device, driver, drivers[device][driver]);
+                            devices_list.append (row);
+
+                            if (last_row != null) {
+                                last_row.install_button.group = row.install_button;
+                            }
+
+                            last_row = row;
+
+                            row.install.connect (() => {
+                                driver_proxy.install.begin (row.driver_name);
+                                progress_placeholder.title = _("Installing %s…").printf (row.driver_name);
+                            });
+                        }
+                    }
+                } catch (Error e) {
+                    warning ("Failed to get driver list from backend: %s", e.message);
+                }
+
+                break;
+
+            case DOWNLOADING:
+                stack.visible_child_name = "progress";
+                progress_placeholder.description = current_state.message;
+                break;
+
+            case ERROR:
+                stack.visible_child_name = "error";
+                error_message = current_state.message;
+                break;
+
+            default:
+                break;
+        }
+    }
+
+    private void header_func (Gtk.ListBoxRow row, Gtk.ListBoxRow? before) {
+        var driver1 = (DriverRow) row;
+
+        bool same = false;
+        if (before != null) {
+            var driver2 = (DriverRow) before;
+            same = driver1.device == driver2.device;
+        }
+
+        if (!same) {
+            var header = new Granite.HeaderLabel (driver1.device);
+            driver1.set_header (header);
+        }
+    }
+}

diff --git a/src/Widgets/DriverRow.vala b/src/Widgets/DriverRow.vala
new file mode 100644
index 000000000..bed435c5c
--- /dev/null
+++ b/src/Widgets/DriverRow.vala
@@ -0,0 +1,49 @@
+/*
+ * Copyright 2024 elementary, Inc. (https://elementary.io)
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ *
+ * Authored by: Leonhard Kargl <leo.kargl@proton.me>
+ */
+
+public class About.DriverRow : Gtk.ListBoxRow {
+    public signal void install ();
+
+    public string device { get; construct; }
+    public string driver_name { get; construct; }
+    public bool installed { get; construct; }
+
+    public Gtk.CheckButton install_button { get; construct; }
+
+    public DriverRow (string device, string driver_name, bool installed) {
+        Object (device: device, driver_name: driver_name, installed: installed);
+    }
+
+    construct {
+        var icon = new Gtk.Image.from_icon_name ("application-x-firmware") {
+            pixel_size = 32
+        };
+
+        var label = new Gtk.Label (driver_name) {
+            hexpand = true,
+            xalign = 0
+        };
+
+        install_button = new Gtk.CheckButton () {
+            active = installed,
+            valign = CENTER
+        };
+
+        var box = new Gtk.Box (HORIZONTAL, 6);
+        box.append (icon);
+        box.append (label);
+        box.append (install_button);
+
+        child = box;
+
+        install_button.toggled.connect (() => {
+            if (install_button.active) {
+                install ();
+            }
+        });
+    }
+}

diff --git a/src/meson.build b/src/meson.build
index a969378bb..6c6d5c229 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -1,14 +1,17 @@
 plug_files = files(
     'Plug.vala',
     'DBus' / 'SystemUpdate.vala',
+    'DBus' / 'Drivers.vala',
     'Interfaces/FirmwareClient.vala',
     'Interfaces/LoginManager.vala',
     'Utils/ARMPartDecoder.vala',
+    'Views' / 'DriversView.vala',
     'Views/FirmwareReleaseView.vala',
     'Views/FirmwareView.vala',
     'Views/HardwareView.vala',
     'Views/OperatingSystemView.vala',
     'Widgets/FirmwareUpdateRow.vala',
+    'Widgets' / 'DriverRow.vala',
     'Widgets' / 'UpdateDetailsDialog.vala'
 )

From 6a16482546d44589ca2d3fe3d76091b9a88e127e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Danielle=20For=C3=A9?= <danielle@elementary.io>
Date: Tue, 4 Jun 2024 04:40:26 -0700
Subject: [PATCH 225/240] Fix deprecated use of get_style_context () (#323)

---
 data/OperatingSystemView.css       |  2 +-
 src/Views/OperatingSystemView.vala | 10 ++++++----
 src/Widgets/FirmwareUpdateRow.vala |  2 +-
 3 files changed, 8 insertions(+), 6 deletions(-)

diff --git a/data/OperatingSystemView.css b/data/OperatingSystemView.css
index 12fcc41df..c188dccbf 100644
--- a/data/OperatingSystemView.css
+++ b/data/OperatingSystemView.css
@@ -1,4 +1,4 @@
-.logo {
+.operating-system-view .logo {
     color: white;
     background-image: linear-gradient(
         to bottom,

diff --git a/src/Views/OperatingSystemView.vala b/src/Views/OperatingSystemView.vala
index 2f0a557f8..d26dec8b5 100644
--- a/src/Views/OperatingSystemView.vala
+++ b/src/Views/OperatingSystemView.vala
@@ -35,9 +35,13 @@ public class About.OperatingSystemView : Gtk.Box {
     private Gtk.Stack button_stack;
 
     construct {
+        add_css_class ("operating-system-view");
+
         var style_provider = new Gtk.CssProvider ();
         style_provider.load_from_resource ("io/elementary/settings/system/OperatingSystemView.css");
 
+        Gtk.StyleContext.add_provider_for_display (Gdk.Display.get_default (), style_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
+
         var uts_name = Posix.utsname ();
 
         support_url = Environment.get_os_info (GLib.OsInfoKey.SUPPORT_URL);
@@ -69,7 +73,6 @@ public class About.OperatingSystemView : Gtk.Box {
                     logo = new Adw.Avatar (128, "", false) {
                         custom_image = Gdk.Paintable.empty (128, 128)
                     };
-                    logo.get_style_context ().add_provider (style_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
 
                     logo_overlay.child = logo;
                     logo_overlay.add_overlay (icon);
@@ -77,7 +80,6 @@ public class About.OperatingSystemView : Gtk.Box {
                     // 128 minus 3px padding on each side
                     icon.pixel_size = 128 - 6;
                     icon.add_css_class ("logo");
-                    icon.get_style_context ().add_provider (style_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
 
                     break;
                 }
@@ -102,7 +104,7 @@ public class About.OperatingSystemView : Gtk.Box {
             use_markup = true,
             xalign = 0
         };
-        title.get_style_context ().add_class (Granite.STYLE_CLASS_H2_LABEL);
+        title.add_css_class (Granite.STYLE_CLASS_H2_LABEL);
 
         var kernel_version_label = new Gtk.Label ("%s %s".printf (uts_name.sysname, uts_name.release)) {
             selectable = true,
@@ -501,7 +503,7 @@ public class About.OperatingSystemView : Gtk.Box {
         };
 
         var continue_button = dialog.add_button (_("Restore Settings"), Gtk.ResponseType.ACCEPT);
-        continue_button.get_style_context ().add_class (Granite.STYLE_CLASS_DESTRUCTIVE_ACTION);
+        continue_button.add_css_class (Granite.STYLE_CLASS_DESTRUCTIVE_ACTION);
 
         dialog.response.connect ((response) => {
             dialog.destroy ();

diff --git a/src/Widgets/FirmwareUpdateRow.vala b/src/Widgets/FirmwareUpdateRow.vala
index 91f4de63a..ae8964bcb 100644
--- a/src/Widgets/FirmwareUpdateRow.vala
+++ b/src/Widgets/FirmwareUpdateRow.vala
@@ -42,7 +42,7 @@ public class About.Widgets.FirmwareUpdateRow : Gtk.ListBoxRow {
             halign = Gtk.Align.START,
             hexpand = true
         };
-        device_name_label.get_style_context ().add_class (Granite.STYLE_CLASS_H3_LABEL);
+        device_name_label.add_css_class (Granite.STYLE_CLASS_H3_LABEL);
 
         var version_label = new Gtk.Label (device.get_version ()) {
             wrap = true,

diff --git a/src/Views/HardwareView.vala b/src/Views/HardwareView.vala
index bc0c77bc6..dadc07557 100644
--- a/src/Views/HardwareView.vala
+++ b/src/Views/HardwareView.vala
@@ -17,9 +17,11 @@ public class About.HardwareView : Gtk.Box {
     private string product_name;
     private string product_version;
     private SystemInterface system_interface;
+    private Polkit.Permission? hostname_permission = null;
     private SessionManager? session_manager;
     private SwitcherooControl? switcheroo_interface;
 
+    private Gtk.Entry hostname_entry;
     private Gtk.Image manufacturer_logo;
 
     private Gtk.Label primary_graphics_info;
@@ -35,12 +37,18 @@ public class About.HardwareView : Gtk.Box {
 
         fetch_hardware_info ();
 
-        var product_name_info = new Gtk.Label (get_host_name ()) {
-            ellipsize = MIDDLE,
-            selectable = true,
-            xalign = 0
+        hostname_entry = new Gtk.Entry () {
+            xalign = 0,
+            hexpand = true,
+            text = get_host_name ()
         };
-        product_name_info.add_css_class (Granite.STYLE_CLASS_H2_LABEL);
+        hostname_entry.add_css_class (Granite.STYLE_CLASS_H2_LABEL);
+
+        if (!has_hostname_permission ()) {
+            hostname_entry.secondary_icon_name = "changes-prevent-symbolic";
+            hostname_entry.secondary_icon_tooltip_text = _("You do not have permission to change the device name");
+            hostname_entry.sensitive = false;
+        }
 
         var processor_info = new Gtk.Label (processor) {
             ellipsize = MIDDLE,
@@ -77,6 +85,7 @@ public class About.HardwareView : Gtk.Box {
         };
 
         var details_box = new Gtk.Box (VERTICAL, 6);
+        details_box.append (hostname_entry);
 
         manufacturer_logo = new Gtk.Image () {
             halign = END,
@@ -85,15 +94,6 @@ public class About.HardwareView : Gtk.Box {
         };
 
         if (oem_enabled) {
-            if (product_name != null) {
-                product_name_info.label = "<b>%s</b>".printf (product_name);
-                product_name_info.use_markup = true;
-            }
-
-            if (product_version != null) {
-                 product_name_info.label += " %s".printf (product_version);
-            }
-
             var manufacturer_info = new Gtk.Label (manufacturer_name) {
                 ellipsize = MIDDLE,
                 selectable = true,
@@ -101,10 +101,16 @@ public class About.HardwareView : Gtk.Box {
             };
             manufacturer_info.add_css_class (Granite.STYLE_CLASS_DIM_LABEL);
 
-            details_box.append (product_name_info);
+            if (product_name != null) {
+                manufacturer_info.label += " <b>%s</b>".printf (product_name);
+                manufacturer_info.use_markup = true;
+            }
+
+            if (product_version != null) {
+                manufacturer_info.label += " %s".printf (product_version);
+            }
+
             details_box.append (manufacturer_info);
-        } else {
-            details_box.append (product_name_info);
         }
 
         update_manufacturer_logo ();
@@ -147,6 +153,33 @@ public class About.HardwareView : Gtk.Box {
         granite_settings.notify["prefers-color-scheme"].connect (() => {
             update_manufacturer_logo ();
         });
+
+        hostname_entry.changed.connect (() => {
+            if (hostname_entry.text != get_host_name ()) {
+                hostname_entry.secondary_icon_name = "document-save-symbolic";
+                hostname_entry.secondary_icon_tooltip_text = _("Update device name");
+            }
+        });
+
+        hostname_entry.activate.connect (on_hostname_entry_activate);
+
+        hostname_entry.icon_release.connect ((icon_pos) => {
+            if (icon_pos == SECONDARY) {
+                on_hostname_entry_activate ();
+            }
+        });
+    }
+
+    private void on_hostname_entry_activate () {
+        hostname_entry.secondary_icon_name = "process-working-symbolic";
+        hostname_entry.add_css_class ("spin");
+
+        set_host_name.begin (hostname_entry.text, (obj, res) => {
+            set_host_name.end (res);
+            hostname_entry.secondary_icon_name = "process-completed-symbolic";
+            hostname_entry.secondary_icon_tooltip_text = _("Device name saved");
+            hostname_entry.remove_css_class ("spin");
+        });
     }
 
     private void update_manufacturer_logo () {
@@ -554,6 +587,51 @@ public class About.HardwareView : Gtk.Box {
         }
     }
 
+    private void request_hostname_permission () {
+        if (hostname_permission != null) {
+            return;
+        }
+
+        try {
+            // Asks for permission to execute SetStaticHostname and SetPrettyHostname
+            hostname_permission = new Polkit.Permission.sync (
+                "org.freedesktop.hostname1.set-static-hostname",
+                new Polkit.UnixProcess (Posix.getpid ())
+            );
+        } catch (Error e) {
+            warning (e.message);
+        }
+    }
+
+    private bool has_hostname_permission () {
+        request_hostname_permission ();
+
+        return hostname_permission != null && hostname_permission.allowed;
+    }
+
+    // Generate static hostname from pretty hostname
+    private string generate_hostname (string pretty_hostname) {
+        string hostname = "";
+        bool met_alpha = false;
+        bool whitespace_before = false;
+
+        foreach (char c in pretty_hostname.to_ascii ().to_utf8 ()) {
+            if (c.isalpha ()) {
+                hostname += c.to_string ();
+                met_alpha = true;
+                whitespace_before = false;
+            } else if ((c.isdigit () || c == '-') && met_alpha) {
+                hostname += c.to_string ();
+                whitespace_before = false;
+            } else if (c.isspace () && !whitespace_before) {
+                hostname += "-";
+                whitespace_before = true;
+            }
+        }
+
+        return hostname;
+    }
+
     private string get_host_name () {
         get_system_interface_instance ();
 
@@ -570,6 +648,28 @@ public class About.HardwareView : Gtk.Box {
         return hostname;
     }
 
+    private async void set_host_name (string hostname) {
+        get_system_interface_instance ();
+
+        if (system_interface == null) {
+            return;
+        }
+
+        request_hostname_permission ();
+
+        if (hostname_permission == null) {
+            return;
+        }
+
+        string static_hostname = generate_hostname (hostname);
+        try {
+            yield system_interface.set_pretty_hostname (hostname, false);
+            yield system_interface.set_static_hostname (static_hostname, false);
+        } catch (Error e) {
+            warning (e.message);
+        }
+    }
+
     // Format layperson-friendly size string, replacement for GLib.format_size ().
     // Always return "GB", "TB" etc. even if IEC_UNITS requested, instead
     // of "GiB", "TiB" etc. for the benefit of average users.
@@ -616,6 +716,9 @@ public interface SystemInterface : Object {
 
     public abstract string pretty_hostname { owned get; }
     public abstract string static_hostname { owned get; }
+
+    public abstract async void set_pretty_hostname (string hostname, bool interactive) throws GLib.Error;
+    public abstract async void set_static_hostname (string hostname, bool interactive) throws GLib.Error;
 }
 
 [DBus (name = "org.gnome.SessionManager")]

diff --git a/src/meson.build b/src/meson.build
index 6c6d5c229..949033662 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -44,6 +44,7 @@ shared_module(
         dependency('packagekit-glib2'),
         dependency('gudev-1.0'),
         dependency('udisks2'),
+        dependency('polkit-gobject-1'),
         appstream_dep,
         meson.get_compiler('vala').find_library('posix'),
         switchboard_dep

From 90cc076a13bc44a87f843dfc592650033cdb6eb9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Danielle=20For=C3=A9?= <danielle@elementary.io>
Date: Tue, 11 Jun 2024 09:51:37 -0700
Subject: [PATCH 239/240] OperatingSystemView: redesign links (#325)

Co-authored-by: Ryan Kornheisl <ryan@skarva.tech>
---
 data/OperatingSystemView.css       |   9 ++
 src/Views/OperatingSystemView.vala | 217 +++++++++++++++++++++++------
 2 files changed, 182 insertions(+), 44 deletions(-)

diff --git a/data/OperatingSystemView.css b/data/OperatingSystemView.css
index c188dccbf..a0f0a3470 100644
--- a/data/OperatingSystemView.css
+++ b/data/OperatingSystemView.css
@@ -17,3 +17,12 @@
         0 2px 3px alpha(@accent_color_900, 0.2);
     -gtk-icon-style: symbolic;
 }
+
+row modelbutton {
+   padding: 3px 6px;
+}
+
+row.link box {
+    padding: 0 6px;
+    border-spacing: 12px;
+}

diff --git a/src/Views/OperatingSystemView.vala b/src/Views/OperatingSystemView.vala
index d26dec8b5..00b3deb93 100644
--- a/src/Views/OperatingSystemView.vala
+++ b/src/Views/OperatingSystemView.vala
@@ -21,7 +21,67 @@
 public class About.OperatingSystemView : Gtk.Box {
     private static Settings update_settings = new Settings ("io.elementary.settings-daemon.system-update");
 
-    private string support_url;
+    private static string _bug_url;
+    private static string bug_url {
+        get {
+            if (_bug_url == null) {
+                _bug_url = Environment.get_os_info (GLib.OsInfoKey.BUG_REPORT_URL);
+
+                if (_bug_url == null) {
+                    _bug_url = "https://docs.elementary.io/contributor-guide/feedback/reporting-issues";
+                }
+            }
+
+            return _bug_url;
+        }
+    }
+
+    private static string _documentation_url;
+    private static string documentation_url {
+        get {
+            if (_documentation_url == null) {
+                _documentation_url = Environment.get_os_info (GLib.OsInfoKey.DOCUMENTATION_URL);
+
+                if (_documentation_url == null) {
+                    _documentation_url = "https://elementary.io/docs/learning-the-basics";
+                }
+            }
+
+            return _documentation_url;
+        }
+    }
+
+    private static string _website_url;
+    private static string website_url {
+        get {
+            if (_website_url == null) {
+                _website_url = Environment.get_os_info (GLib.OsInfoKey.HOME_URL);
+
+                if (_website_url == null) {
+                    _website_url = "https://elementary.io";
+                }
+            }
+
+            return _website_url;
+        }
+    }
+
+
+    private static string _support_url;
+    private static string support_url {
+        get {
+            if (_support_url == null) {
+                _support_url = Environment.get_os_info (GLib.OsInfoKey.SUPPORT_URL);
+
+                if (_support_url == null) {
+                    _support_url = "https://elementary.io/support";
+                }
+            }
+
+            return _support_url;
+        }
+    }
+
     private File? logo_file;
     private Adw.Avatar? logo;
     private Gtk.StringList packages;
@@ -44,11 +104,6 @@ public class About.OperatingSystemView : Gtk.Box {
 
         var uts_name = Posix.utsname ();
 
-        support_url = Environment.get_os_info (GLib.OsInfoKey.SUPPORT_URL);
-        if (support_url == "" || support_url == null) {
-            support_url = "https://elementary.io/support";
-        }
-
         var logo_icon_name = Environment.get_os_info ("LOGO");
         if (logo_icon_name == "" || logo_icon_name == null) {
             logo_icon_name = "distributor-logo";
@@ -113,29 +168,6 @@ public class About.OperatingSystemView : Gtk.Box {
         kernel_version_label.add_css_class (Granite.STYLE_CLASS_SMALL_LABEL);
         kernel_version_label.add_css_class (Granite.STYLE_CLASS_DIM_LABEL);
 
-        var website_url = Environment.get_os_info (GLib.OsInfoKey.HOME_URL);
-        if (website_url == "" || website_url == null) {
-            website_url = "https://elementary.io";
-        }
-
-        var website_label = new Gtk.LinkButton.with_label (website_url, _("Website"));
-
-
-        var help_button = new Gtk.LinkButton.with_label (support_url, _("Get Support")) {
-            halign = Gtk.Align.CENTER,
-            hexpand = true
-        };
-
-        var translate_button = new Gtk.LinkButton.with_label (
-            "https://l10n.elementary.io/projects/",
-            _("Suggest Translations")
-        );
-
-        var bug_button = new Gtk.Button.with_label (_("Send Feedback")) {
-            halign = END,
-            hexpand = true
-        };
-
         packages = new Gtk.StringList (null);
 
         updates_image = new Gtk.Image () {
@@ -215,8 +247,55 @@ public class About.OperatingSystemView : Gtk.Box {
         updates_list.get_first_child ().focusable = false;
         updates_list.get_last_child ().focusable = false;
 
+        var thebasics_link = new LinkRow (
+            documentation_url,
+            _("Basics Guide"),
+            "text-x-generic-symbolic",
+            "green"
+        );
+
+        var support_link = new LinkRow (
+            support_url,
+            _("Get Help"),
+            "help-contents-symbolic",
+            "blue"
+        );
+
+        var website_link = new LinkRow (
+            website_url,
+            _("Our Website"),
+            "view-reader-symbolic",
+            "slate"
+        );
+
+        var getinvolved_link = new LinkRow (
+            "https://elementary.io/get-involved",
+            _("Get Involved or Sponsor Us"),
+            "face-heart-symbolic",
+            "pink"
+        );
+
+        var links_list = new Gtk.ListBox () {
+            margin_bottom = 12,
+            margin_top = 12,
+            valign = CENTER,
+            show_separators = true,
+            selection_mode = NONE
+        };
+        links_list.add_css_class ("boxed-list");
+        links_list.add_css_class (Granite.STYLE_CLASS_RICH_LIST);
+        links_list.append (thebasics_link);
+        links_list.append (support_link);
+        links_list.append (website_link);
+        links_list.append (getinvolved_link);
+
         var settings_restore_button = new Gtk.Button.with_label (_("Restore Default Settings"));
 
+        var bug_button = new Gtk.Button.with_label (_("Send Feedback")) {
+            halign = END,
+            hexpand = true
+        };
+
         var button_grid = new Gtk.Box (HORIZONTAL, 6);
         button_grid.append (settings_restore_button);
         button_grid.append (bug_button);
@@ -227,25 +306,27 @@ public class About.OperatingSystemView : Gtk.Box {
             vexpand = true
         };
         software_grid.attach (logo_overlay, 0, 0, 1, 4);
-        software_grid.attach (title, 1, 0, 3);
+        software_grid.attach (title, 1, 0);
 
-        software_grid.attach (kernel_version_label, 1, 2, 3);
-        software_grid.attach (updates_list, 1, 3, 3);
-        software_grid.attach (website_label, 1, 4);
-        software_grid.attach (help_button, 2, 4);
-        software_grid.attach (translate_button, 3, 4);
+        software_grid.attach (kernel_version_label, 1, 2);
+        software_grid.attach (updates_list, 1, 3);
+        software_grid.attach (links_list, 1, 4);
 
         var clamp = new Adw.Clamp () {
             child = software_grid
         };
 
+        var scrolled_window = new Gtk.ScrolledWindow () {
+            child = clamp
+        };
+
         margin_top = 12;
         margin_end = 12;
         margin_bottom = 12;
         margin_start = 12;
         orientation = Gtk.Orientation.VERTICAL;
         spacing = 12;
-        append (clamp);
+        append (scrolled_window);
         append (button_grid);
 
         var system_updates_settings = new Settings ("io.elementary.settings-daemon.system-update");
@@ -260,13 +341,17 @@ public class About.OperatingSystemView : Gtk.Box {
                     appinfo.launch (null, null);
                 } catch (Error e) {
                     critical (e.message);
-                    launch_support_url ();
+                    launch_uri (bug_url);
                 }
             } else {
-                launch_support_url ();
+                launch_uri (bug_url);
             }
         });
 
+        links_list.row_activated.connect ((row) => {
+            launch_uri (((LinkRow) row).uri);
+        });
+
         get_upstream_release.begin ();
 
         Bus.get_proxy.begin<SystemUpdate> (SESSION, "io.elementary.settings-daemon", "/io/elementary/settings_daemon", 0, null, (obj, res) => {
@@ -483,12 +568,12 @@ public class About.OperatingSystemView : Gtk.Box {
         }
     }
 
-    private void launch_support_url () {
-        try {
-            AppInfo.launch_default_for_uri (support_url, null);
-        } catch (Error e) {
-            critical (e.message);
-        }
+    private void launch_uri (string uri) {
+        var uri_launcher = new Gtk.UriLauncher (uri);
+        uri_launcher.launch.begin (
+            ((Gtk.Application) GLib.Application.get_default ()).active_window,
+            null
+        );
     }
 
     private void settings_restore_clicked () {
@@ -574,4 +659,48 @@ public class About.OperatingSystemView : Gtk.Box {
         settings.apply ();
         GLib.Settings.sync ();
     }
+
+    private class LinkRow : Gtk.ListBoxRow {
+        public string uri { get; construct; }
+        public string icon_name { get; construct; }
+        public string label_string { get; construct; }
+        public string color { get; construct; }
+
+        public LinkRow (string uri, string label_string, string icon_name, string color) {
+            Object (
+                uri: uri,
+                label_string: label_string,
+                icon_name: icon_name,
+                color: color
+            );
+        }
+
+        class construct {
+            set_accessible_role (LINK);
+        }
+
+        construct {
+
+            var image = new Gtk.Image.from_icon_name (icon_name) {
+                pixel_size = 16
+            };
+            image.add_css_class (Granite.STYLE_CLASS_ACCENT);
+            image.add_css_class (color);
+
+            var left_label = new Gtk.Label (label_string) {
+                hexpand = true,
+                xalign = 0
+            };
+
+            var link_image = new Gtk.Image.from_icon_name ("adw-external-link-symbolic");
+
+            var box = new Gtk.Box (HORIZONTAL, 0);
+            box.append (image);
+            box.append (left_label);
+            box.append (link_image);
+
+            child = box;
+            add_css_class ("link");
+        }
+    }
 }
